name: Performance Benchmarks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      comparison_branch:
        description: 'Branch to compare against'
        required: false
        default: 'main'

env:
  BUN_VERSION: 1.2

jobs:
  benchmark:
    name: Run Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Install Dependencies
        run: bun install --frozen-lockfile
      
      - name: Create Performance Directory
        run: mkdir -p .performance/baselines
      
      - name: Download Previous Benchmark Results
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        uses: actions/download-artifact@v4
        with:
          name: benchmark-baselines
          path: .performance/baselines
        continue-on-error: true
      
      - name: Run Benchmarks
        run: |
          echo "Running performance benchmarks..."
          bun run bench | tee .performance/current-results.txt
      
      - name: Validate Performance Thresholds
        run: |
          echo "Validating performance against thresholds..."
          bun run bench:assert
      
      - name: Compare with Baseline
        if: github.event_name == 'pull_request'
        run: |
          if [ -f .performance/baselines/benchmark-results.json ]; then
            echo "Comparing with baseline performance..."
            bun run bench:compare
          else
            echo "No baseline found, skipping comparison"
          fi
      
      - name: Generate Benchmark Report
        run: |
          cat > .performance/report.md << 'EOF'
          # Performance Benchmark Report
          
          ## Test Environment
          - Runner: ${{ runner.os }} ${{ runner.arch }}
          - Bun Version: ${{ env.BUN_VERSION }}
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Results
          EOF
          
          if [ -f .performance/current-results.txt ]; then
            echo '```' >> .performance/report.md
            cat .performance/current-results.txt >> .performance/report.md
            echo '```' >> .performance/report.md
          fi
          
          echo "## Performance Requirements" >> .performance/report.md
          echo "- ‚úÖ Startup time: < 50ms" >> .performance/report.md
          echo "- ‚úÖ Memory usage: < 30MB" >> .performance/report.md
          echo "- ‚úÖ Operation latency: < 10ms" >> .performance/report.md
          echo "- ‚úÖ Binary size: < 20MB" >> .performance/report.md
      
      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: |
            .performance/
          retention-days: 30
      
      - name: Save Baseline for Main Branch
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-baselines
          path: |
            .performance/current-results.txt
            .performance/*.json
          retention-days: 90
      
      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = '.performance/report.md';
            
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              // Find existing comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('Performance Benchmark Report')
              );
              
              const body = `üöÄ **Performance Benchmark Results**\n\n${report}`;
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: body
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
              }
            }

  benchmark-regression:
    name: Performance Regression Check
    needs: benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download Current Results
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: .performance/current
      
      - name: Check for Regressions
        run: |
          if [ -f .performance/current/regression-detected ]; then
            echo "‚ùå Performance regression detected!"
            cat .performance/current/regression-detected
            exit 1
          else
            echo "‚úÖ No performance regressions detected"
          fi