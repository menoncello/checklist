name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Add concurrency control to prevent resource exhaustion (Security fix)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUN_VERSION: 1.2.23
  # Enforce HTTPS for all requests (Security fix)
  NODE_TLS_REJECT_UNAUTHORIZED: 1
  # Turborepo remote caching
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Install Dependencies
        run: bun install

      - name: Setup Turborepo Cache
        if: env.TURBO_TOKEN != ''
        run: bun run turbo lint --filter=nothing  # This triggers cache setup

      - name: Run TypeScript Type Check
        run: bun run typecheck

      - name: Run Linting
        run: bun run lint

      - name: Generate Quality Report
        run: bun run lint:report
        continue-on-error: true

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: reports/quality/
          retention-days: 30

      - name: Check Formatting
        run: bun run format:check
      
      - name: Clean Build Artifacts
        run: rm -rf packages/*/dist
      
      - name: Run Tests with Coverage
        run: bun run test:coverage
      
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/*.test.ts.snap
            test-results/
          retention-days: 7

  build:
    name: Build (${{ matrix.os }})
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: windows-latest
            platform: win32
            arch: x64
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Install Dependencies
        run: bun install --ignore-optional
        continue-on-error: ${{ matrix.os == 'windows-latest' }}
      
      - name: Build Packages
        run: bun run build
      
      - name: Compile Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          bun build ./packages/cli/src/index.ts \
            --compile \
            --target=bun-${{ matrix.platform }}-${{ matrix.arch }} \
            --outfile=dist/checklist-${{ matrix.platform }}-${{ matrix.arch }}
      
      - name: Compile Binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: bun build ./packages/cli/src/index.ts --compile --target=bun-${{ matrix.platform }}-${{ matrix.arch }} --outfile=dist/checklist-${{ matrix.platform }}-${{ matrix.arch }}.exe
      
      - name: Validate Binary Size (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          BINARY_PATH="dist/checklist-${{ matrix.platform }}-${{ matrix.arch }}"
          SIZE=$(stat -f%z "$BINARY_PATH" 2>/dev/null || stat -c%s "$BINARY_PATH" 2>/dev/null || echo 0)
          SIZE_MB=$((SIZE / 1048576))
          echo "Binary size: ${SIZE_MB}MB"
          
          # Adjust limit based on platform
          if [ "${{ matrix.platform }}" == "darwin" ]; then
            LIMIT=100
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            LIMIT=100
          else
            LIMIT=150
          fi
          
          if [ $SIZE_MB -gt $LIMIT ]; then
            echo "ERROR: Binary size exceeds ${LIMIT}MB limit (${SIZE_MB}MB)"
            exit 1
          fi
      
      - name: Validate Binary Size (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $binaryPath = "dist/checklist-${{ matrix.platform }}-${{ matrix.arch }}.exe"
          $size = (Get-Item $binaryPath).Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          Write-Host "Binary size: ${sizeMB}MB"
          if ($sizeMB -gt 150) {
            Write-Host "ERROR: Binary size exceeds 150MB limit (${sizeMB}MB)"
            exit 1
          }
      
      - name: Test Binary
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            ./dist/checklist-${{ matrix.platform }}-${{ matrix.arch }}.exe --version
          else
            ./dist/checklist-${{ matrix.platform }}-${{ matrix.arch }} --version
          fi
        shell: bash
      
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/checklist-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 7

  quality-gates:
    name: Quality Gates
    needs: [test, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Set up job
        run: echo "Checking quality gates..."
      
      - name: Check Test Results
        if: always()
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed or were cancelled"
            exit 1
          fi
          echo "✅ Tests passed"
      
      - name: Check Build Results
        if: always()
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Build failed or was cancelled"
            exit 1
          fi
          echo "✅ Builds passed"

      - name: All Quality Gates Passed
        if: success()
        run: echo "✅ All quality gates passed successfully!"