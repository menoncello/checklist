$ turbo run test:coverage
turbo 2.5.8

• Packages in scope: @checklist/cli, @checklist/core, @checklist/shared, @checklist/tui
• Running test:coverage in 4 packages
• Remote caching disabled
@checklist/shared:build: cache hit, replaying logs b8552ef63467a802
@checklist/shared:build: $ bun build ./src/index.ts --outdir=../../dist/packages/shared --target=bun
@checklist/shared:build: Bundled 1 module in 17ms
@checklist/shared:build: 
@checklist/shared:build:   index.js  69 bytes  (entry point)
@checklist/shared:build: 
@checklist/core:build: cache hit, replaying logs c6af074d990f27d5
@checklist/core:build: $ bun build ./src/index.ts --outdir=../../dist/packages/core --target=bun
@checklist/core:build: Bundled 169 modules in 36ms
@checklist/core:build: 
@checklist/core:build:   index.js  0.68 MB  (entry point)
@checklist/core:build: 
@checklist/shared:test:coverage: cache hit, replaying logs 6ada541dba37291d
@checklist/shared:test:coverage: 
@checklist/shared:test:coverage: [0m[2m[35m$[0m [2m[1mbun test --coverage[0m
@checklist/shared:test:coverage: [0m[1mbun test [0m[2mv1.2.23 (cf136713)[0m
@checklist/shared:test:coverage: [0m
@checklist/shared:test:coverage: tests/terminal.test.ts:
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasColor[2m >[0m[1m should return a boolean[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasColor[2m >[0m[1m should return consistent results[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasColor[2m >[0m[1m should validate supportsColor.stdout comparison logic[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasColor[2m >[0m[1m should handle undefined supportsColor.stdout[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasColor[2m >[0m[1m should handle false supportsColor.stdout[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.colorLevel[2m >[0m[1m should return a number between 0 and 3[0m [0m[2m[0.94ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.colorLevel[2m >[0m[1m should return consistent results[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.colorLevel[2m >[0m[1m should validate supportsColor.stdout undefined check[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.colorLevel[2m >[0m[1m should validate supportsColor.stdout false check[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.colorLevel[2m >[0m[1m should return 0 when supportsColor.stdout is undefined or false[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.colorLevel[2m >[0m[1m should return supportsColor.stdout.level when available[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect UTF-8 from LANG environment variable[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect UTF-8 from LC_ALL environment variable[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect UTF-8 from LC_CTYPE environment variable[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect UTF-8 with different case[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect Unicode-supporting terminals[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect screen terminal[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect VT100 terminal[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect rxvt terminal[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect Windows Terminal[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should detect ConEmu[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should return false when no Unicode support is detected[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should validate locale variable precedence[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should validate UTF-8 regex pattern matching[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should validate TERM variable checks[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should validate terminal includes logic[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should validate Windows platform check[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.hasUnicode[2m >[0m[1m should validate Boolean conversion in Windows checks[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.size[2m >[0m[1m should return terminal dimensions[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.size[2m >[0m[1m should return default values when stdout dimensions are undefined[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.size[2m >[0m[1m should validate nullish coalescing for columns[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.size[2m >[0m[1m should validate nullish coalescing for rows[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.size[2m >[0m[1m should validate object structure returned[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.size[2m >[0m[1m should handle zero values[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.size[2m >[0m[1m should handle negative values[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should detect CI from CI environment variable[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should detect CI from CONTINUOUS_INTEGRATION environment variable[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should detect GitHub Actions[0m [0m[2m[0.58ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should detect GitLab CI[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should detect Jenkins[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should return false when not in CI[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should validate nullish coalescing in CI detection[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should validate Boolean conversion logic[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should test CI environment variable precedence[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isCI[2m >[0m[1m should handle undefined environment variables[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isTTY[2m >[0m[1m should return true when stdout is TTY[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isTTY[2m >[0m[1m should return false when stdout is not TTY[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isTTY[2m >[0m[1m should return false when stdout.isTTY is undefined[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isTTY[2m >[0m[1m should validate Boolean conversion of isTTY[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mterminal.isTTY[2m >[0m[1m should handle various isTTY values[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should generate up cursor movement[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should generate down cursor movement[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should generate forward cursor movement[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should generate back cursor movement[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should generate next line movement[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should generate previous line movement[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should generate column movement[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should generate position movement[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should validate default parameter for movement functions[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should validate string template literal construction[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor movement[2m >[0m[1m should validate position function parameters[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor visibility[2m >[0m[1m should generate hide cursor[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor visibility[2m >[0m[1m should generate show cursor[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor visibility[2m >[0m[1m should generate save cursor[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mCursor visibility[2m >[0m[1m should generate restore cursor[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mClearing[2m >[0m[1m should generate clear screen[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mClearing[2m >[0m[1m should generate clear line[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mClearing[2m >[0m[1m should generate clear to end of line[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mClearing[2m >[0m[1m should generate clear to start of line[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mStyles[2m >[0m[1m should generate reset[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mStyles[2m >[0m[1m should generate bold[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mStyles[2m >[0m[1m should generate dim[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mStyles[2m >[0m[1m should generate italic[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mStyles[2m >[0m[1m should generate underline[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mStyles[2m >[0m[1m should generate inverse[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mStyles[2m >[0m[1m should generate strikethrough[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mColors[2m >[0m[1m should generate foreground colors[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mColors[2m >[0m[1m should generate background colors[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mColors[2m >[0m[1m should generate 256 colors[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mColors[2m >[0m[1m should generate RGB colors[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mColors[2m >[0m[1m should validate 256 color template literal construction[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mColors[2m >[0m[1m should validate RGB color template literal construction[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mANSI Escape Codes[2m > [0mColors[2m >[0m[1m should validate color number patterns[0m [0m[2m[0.20ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should remove ANSI escape sequences[0m [0m[2m[0.98ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should handle multiple ANSI codes[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should handle text without ANSI codes[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should handle empty string[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should handle complex ANSI sequences[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should validate regex pattern matching[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should handle malformed ANSI sequences[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should handle ANSI sequences with various parameters[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstripAnsi[2m >[0m[1m should handle non-ANSI escape sequences[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should return text when color is supported or not supported[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should return plain text when no codes are provided[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should handle empty text[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should return consistent results for same input[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should include reset code when styling is applied[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should handle multiple color codes[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should handle RGB color codes[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should handle 256 color codes[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate color level checking logic[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate color level filtering for RGB codes[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate color level filtering for 256 color codes[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate color level filtering for basic codes[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate string.includes checks for color codes[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate string.includes checks for 256 color codes[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate code filtering logic[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate empty supported codes check[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mstyle[2m >[0m[1m should validate template literal construction[0m [0m[2m[0.37ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mEdge Cases[2m >[0m[1m should handle large cursor movements[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mEdge Cases[2m >[0m[1m should handle zero cursor movements[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mEdge Cases[2m >[0m[1m should handle negative parameters gracefully[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mEdge Cases[2m >[0m[1m should handle very large RGB values[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mEdge Cases[2m >[0m[1m should handle zero RGB values[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mEdge Cases[2m >[0m[1m should handle invalid ANSI sequences in stripAnsi[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mEdge Cases[2m >[0m[1m should handle mixed valid and invalid ANSI sequences[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should filter RGB colors when level < 3[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should include RGB colors when level >= 3[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should filter 256 colors when level < 2[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should include 256 colors when level >= 2[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should include basic colors when level >= 1[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should return plain text when level = 0[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should validate level >= 3 boundary[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should validate level >= 2 boundary[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mstyle() with different color levels[2m >[0m[1m should validate level >= 1 boundary[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mhasColor() boundary testing[2m >[0m[1m should return false when stdout is exactly false[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mhasColor() boundary testing[2m >[0m[1m should return true when stdout is not false[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mhasColor() boundary testing[2m >[0m[1m should return true when stdout is undefined[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mcolorLevel() boundary testing[2m >[0m[1m should return 0 when stdout is undefined[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mcolorLevel() boundary testing[2m >[0m[1m should return 0 when stdout is false[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Mock Color Level Scenarios[2m > [0mcolorLevel() boundary testing[2m >[0m[1m should return stdout.level when available[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mLocale variable fallback chain[2m >[0m[1m should use LANG first in nullish coalescing chain[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mLocale variable fallback chain[2m >[0m[1m should use LC_ALL when LANG is undefined[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mLocale variable fallback chain[2m >[0m[1m should use LC_CTYPE when LANG and LC_ALL are undefined[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mLocale variable fallback chain[2m >[0m[1m should use empty string when all locale vars are undefined[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mLocale variable fallback chain[2m >[0m[1m should handle empty string in LANG variable[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mUTF-8 regex validation[2m >[0m[1m should match UTF-8 with dash[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mUTF-8 regex validation[2m >[0m[1m should match utf8 without dash (case insensitive)[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mUTF-8 regex validation[2m >[0m[1m should match UTF8 without dash[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mUTF-8 regex validation[2m >[0m[1m should not match UTF-8 in middle of string[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mUTF-8 regex validation[2m >[0m[1m should not match UTF-16[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mTERM variable conditional logic[2m >[0m[1m should return false when TERM is undefined[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mTERM variable conditional logic[2m >[0m[1m should return false when TERM is empty string[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mTERM variable conditional logic[2m >[0m[1m should check terminal types when TERM is defined and not empty[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mTERM variable conditional logic[2m >[0m[1m should test all terminal types in array[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mTERM variable conditional logic[2m >[0m[1m should use .some() not .every() for terminal matching[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mTERM variable conditional logic[2m >[0m[1m should return false when TERM does not include any known type[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mWindows platform detection[2m >[0m[1m should check WT_SESSION on win32[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mWindows platform detection[2m >[0m[1m should check ConEmuDir on win32[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mWindows platform detection[2m >[0m[1m should use ?? operator for Windows env vars[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mWindows platform detection[2m >[0m[1m should return false on win32 without WT_SESSION or ConEmuDir[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mWindows platform detection[2m >[0m[1m should not use Boolean for empty string Windows vars[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - hasUnicode Logical Operators[2m > [0mWindows platform detection[2m >[0m[1m should validate platform === win32 comparison[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - String Literal Validation[2m >[0m[1m should validate empty string fallback in locale[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - String Literal Validation[2m >[0m[1m should validate .join("") in style function[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - String Literal Validation[2m >[0m[1m should validate specific ANSI color code strings[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should filter out RGB codes when level is 1[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should filter out 256 colors when level is 1[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should return plain text when all codes are filtered[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should validate filter is actually called[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should validate empty filter result returns plain text[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should validate filter uses code.includes for exact strings[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should validate includes checks exact string "38;2" not ""[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should validate includes checks exact string "48;2" not ""[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should validate includes checks exact string "38;5" not ""[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() filter actually filters codes[2m >[0m[1m should validate includes checks exact string "48;5" not ""[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() when hasColor() is false[2m >[0m[1m should return plain text when hasColor is false[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() when hasColor() is false[2m >[0m[1m should skip filter logic when hasColor is false[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() when hasColor() is false[2m >[0m[1m should validate early return when hasColor is false[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() supportedCodes.length === 0 check[2m >[0m[1m should return text when supportedCodes is empty[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() supportedCodes.length === 0 check[2m >[0m[1m should validate length === 0 comparison[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mstyle() supportedCodes.length === 0 check[2m >[0m[1m should not return text when supportedCodes.length > 0[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mValidate || operators in color code checks[2m >[0m[1m should use || not && for RGB check[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mTerminal Capabilities[2m > [0mMutation Testing - Filter Logic and Edge Cases[2m > [0mValidate || operators in color code checks[2m >[0m[1m should use || not && for 256 check[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m
@checklist/shared:test:coverage: tests/index.test.ts:
@checklist/shared:test:coverage: [0m[32m✓[0m [0mIndex Exports[2m > [0mversion[2m >[0m[1m should export a version string[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mIndex Exports[2m > [0mversion[2m >[0m[1m should have a valid semantic version format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mIndex Exports[2m > [0mversion[2m >[0m[1m should match the expected version[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mIndex Exports[2m > [0mmodule exports[2m >[0m[1m should export all clipboard utilities[0m [0m[2m[[1m34.73ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mIndex Exports[2m > [0mmodule exports[2m >[0m[1m should export all environment utilities[0m [0m[2m[0.59ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mIndex Exports[2m > [0mmodule exports[2m >[0m[1m should export all terminal utilities[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m
@checklist/shared:test:coverage: tests/clipboard.test.ts:
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should accept a string parameter[0m [0m[2m[[1m26.89ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should accept empty string[0m [0m[2m[[1m11.34ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should accept special characters[0m [0m[2m[[1m17.60ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should accept options parameter[0m [0m[2m[[1m23.49ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should handle very long text[0m [0m[2m[[1m71.74ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should handle Unicode text[0m [0m[2m[[1m24.16ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should handle fallback disabled[0m [0m[2m[[1m19.50ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should respect timeout parameter[0m [0m[2m[[1m16.30ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should use default timeout when not specified[0m [0m[2m[[1m18.11ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should handle fallback when primary method fails[0m [0m[2m[[1m22.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should validate input text type[0m [0m[2m[[1m25.22ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should handle very large text content[0m [0m[2m[[1m17.44ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mwriteToClipboard[2m >[0m[1m should respect fallback option correctly[0m [0m[2m[[1m33.37ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should return a string[0m [0m[2m[[1m22.82ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should accept options parameter[0m [0m[2m[[1m18.97ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should handle fallback disabled[0m [0m[2m[[1m90.20ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should return empty string when clipboard is not available[0m [0m[2m[[1m45.59ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should respect timeout parameter[0m [0m[2m[[1m26.67ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should use default timeout when not specified[0m [0m[2m[[1m57.28ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should return empty string when fallback is enabled and clipboard fails[0m [0m[2m[[1m91.19ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should handle empty clipboard gracefully[0m [0m[2m[[1m22.46ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should respect fallback option correctly[0m [0m[2m[[1m100.46ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mreadFromClipboard[2m >[0m[1m should validate returned content type[0m [0m[2m[[1m18.77ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0misClipboardAvailable[2m >[0m[1m should return a boolean[0m [0m[2m[[1m20.72ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0misClipboardAvailable[2m >[0m[1m should not throw during availability check[0m [0m[2m[[1m17.97ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0misClipboardAvailable[2m >[0m[1m should complete without error[0m [0m[2m[[1m16.71ms[0m[2m][0m
@checklist/core:test:coverage: cache hit, replaying logs e265957fe673d8e1
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0misClipboardAvailable[2m >[0m[1m should use specific timeout for availability check[0m [0m[2m[[1m11.91ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0misClipboardAvailable[2m >[0m[1m should return false when clipboard is not available[0m [0m[2m[[1m17.69ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0misClipboardAvailable[2m >[0m[1m should handle availability check without throwing[0m [0m[2m[[1m11.41ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0misClipboardAvailable[2m >[0m[1m should use fallback=false internally[0m [0m[2m[[1m10.92ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should complete without error[0m [0m[2m[[1m11.28ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should accept options parameter[0m [0m[2m[[1m11.82ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should handle fallback disabled[0m [0m[2m[[1m10.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should not throw when fallback is enabled[0m [0m[2m[[1m10.54ms[0m[2m][0m
@checklist/core:test:coverage: 
@checklist/core:test:coverage: [0m[2m[35m$[0m [2m[1mbun test --coverage[0m
@checklist/core:test:coverage: [0m[1mbun test [0m[2mv1.2.23 (cf136713)[0m
@checklist/core:test:coverage: [0m
@checklist/core:test:coverage: tests/build-pipeline.test.ts:
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build.yml workflow should exist[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should have multi-platform matrix[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should validate binary size[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should use caching[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should generate checksums[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should upload artifacts[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should validate all builds[0m
@checklist/core:test:coverage: [0m
@checklist/core:test:coverage: tests/WorkflowEngine.integration.test.ts:
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mWorkflowEngine Integration Tests[2m > [0m[2mStateManager Integration[2m >[0m[2m persists state across engine restarts[0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mStateManager Integration[2m >[0m[1m handles concurrent state updates safely[0m [0m[2m[[1m112.94ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mStateManager Integration[2m >[0m[1m recovers from corrupted state[0m [0m[2m[[1m28.30ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mTransaction Rollback Scenarios[2m >[0m[1m rolls back state on advance failure[0m [0m[2m[[1m16.81ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mTransaction Rollback Scenarios[2m >[0m[1m rolls back skip operation on failure[0m [0m[2m[[1m13.03ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mTransaction Rollback Scenarios[2m >[0m[1m maintains consistency during partial state updates[0m [0m[2m[[1m12.83ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mError Recovery Mechanisms[2m >[0m[1m recovers from validation errors[0m [0m[2m[[1m14.58ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mError Recovery Mechanisms[2m >[0m[1m handles and recovers from state transition errors[0m [0m[2m[[1m12.84ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mError Recovery Mechanisms[2m >[0m[1m emits error events for recovery handling[0m [0m[2m[[1m11.78ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mError Recovery Mechanisms[2m >[0m[1m attempts automatic recovery for recoverable errors[0m [0m[2m[8.54ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mError Recovery Mechanisms[2m >[0m[1m restores from backup on state corruption[0m [0m[2m[[1m11.35ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mPerformance Under Load[2m >[0m[1m handles large workflow with many steps[0m [0m[2m[[1m20.47ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should write empty string to clear clipboard[0m [0m[2m[9.75ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should use writeToClipboard internally[0m [0m[2m[[1m14.64ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should respect timeout parameter[0m [0m[2m[[1m13.17ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should handle fallback option correctly[0m [0m[2m[[1m23.40ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mclearClipboard[2m >[0m[1m should validate empty string parameter[0m [0m[2m[[1m11.16ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should handle concurrent operations[0m [0m[2m[[1m22.65ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mWorkflowEngine Integration Tests[2m > [0mPerformance Under Load[2m >[0m[1m maintains low memory footprint[0m [0m[2m[[1m128.38ms[0m[2m][0m
@checklist/core:test:coverage: [0m
@checklist/core:test:coverage: src/state/FieldEncryption.test.ts:
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0minitializeKey[2m >[0m[1m should generate and save a new encryption key[0m [0m[2m[[1m10.89ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0minitializeKey[2m >[0m[1m should reuse existing key if present[0m [0m[2m[[1m13.88ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0minitializeKey[2m >[0m[1m should create metadata file[0m [0m[2m[3.28ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mencrypt and decrypt[2m >[0m[1m should encrypt and decrypt a string[0m [0m[2m[1.73ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mencrypt and decrypt[2m >[0m[1m should encrypt and decrypt an object[0m [0m[2m[0.51ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mencrypt and decrypt[2m >[0m[1m should throw on invalid encrypted field[0m [0m[2m[0.31ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mencrypt and decrypt[2m >[0m[1m should throw on tampered auth tag[0m [0m[2m[0.30ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mshouldEncrypt[2m >[0m[1m should identify sensitive field paths[0m [0m[2m[0.60ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mshouldEncrypt[2m >[0m[1m should match wildcard patterns[0m [0m[2m[0.34ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mshouldEncrypt[2m >[0m[1m should not encrypt non-sensitive fields[0m [0m[2m[0.53ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mencryptObject[2m >[0m[1m should encrypt sensitive fields in nested object[0m [0m[2m[0.67ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mencryptObject[2m >[0m[1m should handle arrays with sensitive data[0m [0m[2m[0.54ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mencryptObject[2m >[0m[1m should skip already encrypted fields[0m [0m[2m[0.41ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mdecryptObject[2m >[0m[1m should decrypt all encrypted fields[0m [0m[2m[1.04ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mdecryptObject[2m >[0m[1m should handle mixed encrypted and plain fields[0m [0m[2m[1.06ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mFieldEncryption[2m > [0mupdateMetadata[2m >[0m[1m should update encrypted fields list[0m [0m[2m[[1m14.96ms[0m[2m][0m
@checklist/core:test:coverage: [0m
@checklist/core:test:coverage: tests/state/validation.test.ts:
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mSchema Validation[2m >[0m[1m should validate a correct state[0m [0m[2m[8.23ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mSchema Validation[2m >[0m[1m should reject state with missing required fields[0m [0m[2m[4.69ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mSchema Validation[2m >[0m[1m should reject state with invalid schema version format[0m [0m[2m[5.36ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mSchema Validation[2m >[0m[1m should reject state with invalid status[0m [0m[2m[3.36ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mSchema Validation[2m >[0m[1m should accept state without activeInstance[0m [0m[2m[4.65ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mSchema Validation[2m >[0m[1m should validate completed steps[0m [0m[2m[4.13ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mChecksum Validation[2m >[0m[1m should calculate checksum correctly[0m [0m[2m[7.19ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mChecksum Validation[2m >[0m[1m should verify valid checksum[0m [0m[2m[4.86ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should handle zero timeout[0m [0m[2m[1.89ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should handle very short timeout[0m [0m[2m[1.76ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should handle very long timeout[0m [0m[2m[8.57ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should validate options parameter structure[0m [0m[2m[[1m32.67ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should handle string with null character[0m [0m[2m[[1m10.93ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should handle string with escape sequences[0m [0m[2m[9.53ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should handle undefined options parameter[0m [0m[2m[9.48ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should validate arithmetic operations in timeout calculations[0m [0m[2m[[1m44.27ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should test boolean logic in fallback handling[0m [0m[2m[[1m24.70ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mEdge Cases[2m >[0m[1m should test nullish coalescing in default parameters[0m [0m[2m[[1m10.72ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mwriteToClipboard - Timeout Scenarios[2m >[0m[1m should trigger timeout when write takes too long[0m [0m[2m[[1m51.79ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mChecksum Validation[2m >[0m[1m should reject invalid checksum[0m [0m[2m[[1m38.54ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mChecksum Validation[2m >[0m[1m should produce different checksums for different states[0m [0m[2m[4.97ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mwriteToClipboard - Timeout Scenarios[2m >[0m[1m should throw timeout error when fallback=false[0m [0m[2m[[1m51.84ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mwriteToClipboard - Timeout Scenarios[2m >[0m[1m should validate exact timeout error message[0m [0m[2m[[1m51.69ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mwriteToClipboard - Error Propagation[2m >[0m[1m should suppress error when fallback=true[0m [0m[2m[0.22ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mFull Validation[2m >[0m[1m should validate state with schema and checksum[0m [0m[2m[5.11ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mFull Validation[2m >[0m[1m should skip checksum validation for initial state[0m [0m[2m[3.05ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mFull Validation[2m >[0m[1m should detect corrupted state[0m [0m[2m[[1m13.90ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mVersion Management[2m >[0m[1m should validate supported schema versions[0m [0m[2m[8.35ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateValidator[2m > [0mVersion Management[2m >[0m[1m should determine migration compatibility[0m [0m[2m[8.05ms[0m[2m][0m
@checklist/core:test:coverage: [0m
@checklist/core:test:coverage: tests/state/migrations/migrationPaths.test.ts:
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mwriteToClipboard - Error Propagation[2m >[0m[1m should propagate error when fallback=false[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mwriteToClipboard - Error Propagation[2m >[0m[1m should return early in catch block when fallback=true[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mwriteToClipboard - Error Propagation[2m >[0m[1m should throw from else block when fallback=false[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mreadFromClipboard - Timeout Scenarios[2m >[0m[1m should trigger timeout when read takes too long[0m [0m[2m[[1m50.81ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mreadFromClipboard - Timeout Scenarios[2m >[0m[1m should throw timeout error when fallback=false on read[0m [0m[2m[[1m50.71ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mreadFromClipboard - Timeout Scenarios[2m >[0m[1m should validate exact timeout error message on read[0m [0m[2m[[1m50.57ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mreadFromClipboard - Error Handling[2m >[0m[1m should return empty string when error and fallback=true[0m [0m[2m[0.30ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mreadFromClipboard - Error Handling[2m >[0m[1m should throw error when fallback=false on read[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mclearClipboard - String Parameter Validation[2m >[0m[1m should call writeToClipboard with empty string[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mclearClipboard - String Parameter Validation[2m >[0m[1m should pass empty string literal to writeToClipboard[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0misClipboardAvailable - Return Value Validation[2m >[0m[1m should return true when clipboard read succeeds[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0misClipboardAvailable - Return Value Validation[2m >[0m[1m should return false when clipboard read fails[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0misClipboardAvailable - Return Value Validation[2m >[0m[1m should use fallback=false internally[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0misClipboardAvailable - Return Value Validation[2m >[0m[1m should use 500ms timeout (not 2000ms default)[0m [0m[2m[[1m100.15ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mPromise.race - Validation[2m >[0m[1m should use Promise.race for timeout in writeToClipboard[0m [0m[2m[[1m50.28ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mClipboard Utilities[2m > [0mMutation Testing - Force Error Scenarios[2m > [0mPromise.race - Validation[2m >[0m[1m should use Promise.race for timeout in readFromClipboard[0m [0m[2m[[1m51.32ms[0m[2m][0m
@checklist/shared:test:coverage: [0m
@checklist/shared:test:coverage: tests/environment.test.ts:
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should return complete environment information[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate platform detection logic[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate architecture detection[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate Node.js version detection[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate Bun version detection[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate Boolean conversion for isTTY[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate network detection logic[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate user detection nullish coalescing[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate home directory detection[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate shell detection nullish coalescing[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should detect CI environment correctly[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate CI detection nullish coalescing logic[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate CI detection Boolean conversion[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should detect development mode when NODE_ENV is undefined[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should detect development mode when NODE_ENV is development[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should detect production mode[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mFull migration path v0.0.0 → v1.0.0[2m >[0m[1m should migrate through all versions successfully[0m [0m[2m[[1m54.27ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mFull migration path v0.0.0 → v1.0.0[2m >[0m[1m should handle partial migration v0.1.0 → v1.0.0[0m [0m[2m[2.65ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mFull migration path v0.0.0 → v1.0.0[2m >[0m[1m should skip migration for already up-to-date state[0m [0m[2m[0.82ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mMigration with complex data[2m >[0m[1m should preserve existing data during migration[0m [0m[2m[6.18ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mPerformance benchmarks[2m >[0m[1m should complete migration within 500ms for typical state[0m [0m[2m[[1m19.55ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mPerformance benchmarks[2m >[0m[1m should handle large state files (>50KB)[0m [0m[2m[[1m25.25ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mVersion skipping[2m >[0m[1m should find optimal path when direct migration exists[0m [0m[2m[0.41ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mMigration validation[2m >[0m[1m should validate state after each migration step[0m [0m[2m[2.75ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Paths[2m > [0mMigration validation[2m >[0m[1m should rollback if validation fails[0m [0m[2m[[1m35.84ms[0m[2m][0m
@checklist/core:test:coverage: [0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate development mode detection logic[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should validate production mode detection logic[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should test NODE_ENV edge cases[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should detect hasNetwork based on OFFLINE env[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should handle missing user environment variables[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/core:test:coverage: tests/state/migrations/MigrationRunner.test.ts:
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should migrate from 0.0.0 to 1.0.0[0m [0m[2m[4.75ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should skip migration if already at target version[0m [0m[2m[1.84ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should handle dry run without applying changes[0m [0m[2m[2.01ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should create backup before migration[0m [0m[2m[2.07ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should rollback on migration failure[0m [0m[2m[2.70ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should validate migration if validator provided[0m [0m[2m[2.89ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should emit progress events[0m [0m[2m[3.67ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should handle non-existent state file[0m [0m[2m[1.46ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mmigrate[2m >[0m[1m should track migration history[0m [0m[2m[2.97ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mcreateBackup[2m >[0m[1m should create backup file with timestamp[0m [0m[2m[3.73ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mcreateBackup[2m >[0m[1m should rotate old backups[0m [0m[2m[[1m61.03ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mlistBackups[2m >[0m[1m should list all backup files[0m [0m[2m[[1m15.26ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mlistBackups[2m >[0m[1m should sort backups by timestamp descending[0m [0m[2m[[1m105.89ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mrollback[2m >[0m[1m should restore state from backup[0m [0m[2m[2.87ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRunner[2m > [0mrollback[2m >[0m[1m should emit rollback events[0m [0m[2m[1.46ms[0m[2m][0m
@checklist/core:test:coverage: [0m
@checklist/core:test:coverage: tests/state/migrations/rollback.test.ts:
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mRollback on Migration Failure[2m >[0m[1m should rollback when migration validation fails[0m [0m[2m[3.40ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mRollback on Migration Failure[2m >[0m[1m should rollback when migration throws an error[0m [0m[2m[2.47ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mRollback on Migration Failure[2m >[0m[1m should rollback partial migration on failure[0m [0m[2m[2.35ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mRollback on Migration Failure[2m >[0m[1m should emit rollback events[0m [0m[2m[1.70ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mRollback on Migration Failure[2m >[0m[1m should handle rollback failure gracefully[0m [0m[2m[1.60ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mBackup Integrity During Rollback[2m >[0m[1m should preserve backup file after rollback[0m [0m[2m[1.98ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mBackup Integrity During Rollback[2m >[0m[1m should create backup even when migration fails immediately[0m [0m[2m[1.98ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mComplex Rollback Scenarios[2m >[0m[1m should handle corrupted state during migration[0m [0m[2m[1.91ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mComplex Rollback Scenarios[2m >[0m[1m should handle multiple validation failures in sequence[0m [0m[2m[8.05ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigration Rollback Scenarios[2m > [0mComplex Rollback Scenarios[2m >[0m[1m should not create backup when createBackup option is false[0m [0m[2m[4.49ms[0m[2m][0m
@checklist/core:test:coverage: [0m
@checklist/core:test:coverage: tests/state/migrations/MigrationRegistry.test.ts:
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mregisterMigration[2m >[0m[1m should register a migration[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mregisterMigration[2m >[0m[1m should throw error for duplicate migration[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mregisterMigration[2m >[0m[1m should emit migration:registered event[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mfindPath[2m >[0m[1m should find direct migration path[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mfindPath[2m >[0m[1m should find multi-step migration path[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mfindPath[2m >[0m[1m should find shortest path when multiple paths exist[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mfindPath[2m >[0m[1m should return empty path for same version[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mfindPath[2m >[0m[1m should throw error for backwards migration[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mfindPath[2m >[0m[1m should throw error for non-existent path[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mcanMigrate[2m >[0m[1m should return true for valid migration path[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mcanMigrate[2m >[0m[1m should return false for invalid migration path[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mcanMigrate[2m >[0m[1m should return false for backwards migration[0m [0m[2m[0.31ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mcanMigrate[2m >[0m[1m should return true for same version[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should use USERNAME when USER is not available[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should handle missing home environment variables[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should use USERPROFILE when HOME is not available[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mgetAvailableTargets[2m >[0m[1m should return all reachable versions[0m [0m[2m[0.23ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mgetAvailableTargets[2m >[0m[1m should return versions in descending order[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mgetAvailableTargets[2m >[0m[1m should return empty array for isolated version[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:build: cache hit, replaying logs 9565d4ee215ee6a3
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should handle missing shell environment variables[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should use ComSpec when SHELL is not available[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mclear[2m >[0m[1m should clear all migrations[0m [0m[2m[0.28ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mclear[2m >[0m[1m should emit registry:cleared event[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mMigrationRegistry[2m > [0mtoJSON[2m >[0m[1m should serialize registry state[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/core:test:coverage: [0m
@checklist/core:test:coverage: tests/state/manager/StateInitializer.test.ts:
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0minitializeState[2m >[0m[1m should initialize state successfully when file exists[0m [0m[2m[0.52ms[0m[2m][0m
@checklist/cli:build: 
@checklist/cli:build: [0m[2m[35m$[0m [2m[1mbun build ./src/index.ts --outdir=../../dist/apps/cli --target=bun[0m
@checklist/cli:build: [32mBundled 175 modules in 32ms[0m
@checklist/cli:build: 
@checklist/cli:build:   [34mindex.js[33m  0.68 MB  [2m(entry point)[0m
@checklist/cli:build: 
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should include Bun version[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should handle CONTINUOUS_INTEGRATION environment variable[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mdetectEnvironment[2m >[0m[1m should handle GITHUB_ACTIONS environment variable[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should return strings for all path methods[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should validate userData platform-specific logic[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should validate userConfig platform-specific logic[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should validate cache platform-specific logic[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0minitializeState[2m >[0m[1m should create new state when file does not exist[0m [0m[2m[0.19ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0minitializeState[2m >[0m[1m should throw StateError when directory creation fails[0m [0m[2m[0.91ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0minitializeState[2m >[0m[1m should throw StateError when file existence check fails[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mloadExistingState[2m >[0m[1m should load and validate existing state successfully[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mloadExistingState[2m >[0m[1m should throw StateError when state validation fails[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mloadExistingState[2m >[0m[1m should handle YAML parsing errors[0m [0m[2m[0.50ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mloadExistingState[2m >[0m[1m should handle file read errors[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mhandleMigrationIfNeeded[2m >[0m[1m should not migrate when versions match[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mhandleMigrationIfNeeded[2m >[0m[1m should migrate when versions differ[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mhandleMigrationIfNeeded[2m >[0m[1m should handle state without version (default to 1.0.0)[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mhandleMigrationIfNeeded[2m >[0m[1m should handle migration errors[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mcreateNewState[2m >[0m[1m should create and save new state successfully[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mcreateNewState[2m >[0m[1m should handle file write errors during new state creation[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mcreateEmptyState[2m >[0m[1m should create empty state with correct structure[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0msaveNewState[2m >[0m[1m should save state as YAML with correct formatting[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0merror handling and edge cases[2m >[0m[1m should handle invalid YAML content gracefully[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0merror handling and edge cases[2m >[0m[1m should handle null state from YAML parsing[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0merror handling and edge cases[2m >[0m[1m should handle validation with multiple errors[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0merror handling and edge cases[2m >[0m[1m should maintain state structure consistency during migration[0m [0m[2m[0.17ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mintegration scenarios[2m >[0m[1m should handle complete initialization flow with existing valid state[0m [0m[2m[0.21ms[0m[2m][0m
@checklist/core:test:coverage: [0m[32m✓[0m [0mStateInitializer[2m > [0mintegration scenarios[2m >[0m[1m should handle initialization with corrupt state and failure[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/core:test:coverage: 
@checklist/core:test:coverage: [0m[2m8 tests skipped:[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build.yml workflow should exist[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should have multi-platform matrix[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should validate binary size[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should use caching[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should generate checksums[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should upload artifacts[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mBuild Pipeline Configuration[2m >[0m[2m build workflow should validate all builds[0m
@checklist/core:test:coverage: [0m[33m»[2m [0m[2mWorkflowEngine Integration Tests[2m > [0m[2mStateManager Integration[2m >[0m[2m persists state across engine restarts[0m
@checklist/core:test:coverage: [0m[2m--------------------------------------------------|---------|---------|-------------------[0m
@checklist/core:test:coverage: File                                              [2m|[0m % Funcs [2m|[0m % Lines [2m|[0m Uncovered Line #s
@checklist/core:test:coverage: [2m--------------------------------------------------|---------|---------|-------------------[0m
@checklist/core:test:coverage: [0m[1m[31mAll files                                        [0m[2m | [0m[1m[31m  52.34[0m[2m | [0m[1m[31m  54.02[0m[2m |[0m
@checklist/core:test:coverage: [0m[1m[31m src/state/BackupManager.ts                      [0m[2m | [0m[1m[31m   6.25[0m[2m | [0m[1m[31m   5.26[0m[2m | [0m[31m20-217[0m[2m,[0m[31m221-292
@checklist/core:test:coverage: [0m[1m[31m src/state/ConcurrencyManager.ts                 [0m[2m | [0m[1m[31m   5.56[0m[2m | [0m[1m[31m   9.13[0m[2m | [0m[31m33-88[0m[2m,[0m[31m95-132[0m[2m,[0m[31m136-235[0m[2m,[0m[31m241-265
@checklist/core:test:coverage: [0m[1m[31m src/state/DirectoryManager.ts                   [0m[2m | [0m[1m[31m  21.05[0m[2m | [0m[1m[31m  13.95[0m[2m | [0m[31m11-79[0m[2m,[0m[31m85[0m[2m,[0m[31m97[0m[2m,[0m[31m105-143
@checklist/core:test:coverage: [0m[1m[31m src/state/EncryptionKeyManager.ts               [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[31m  80.95[0m[2m | [0m[31m64-70
@checklist/core:test:coverage: [0m[1m[31m src/state/EncryptionMetadata.ts                 [0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[31m  77.19[0m[2m | [0m[31m78-90
@checklist/core:test:coverage: [0m[1m[31m src/state/EncryptionOperations.ts               [0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/core:test:coverage: [0m[1m[31m src/state/FieldEncryption.ts                    [0m[2m | [0m[1m[31m  77.78[0m[2m | [0m[1m[31m  69.52[0m[2m | [0m[31m63-76[0m[2m,[0m[31m274-319[0m[2m,[0m[31m323[0m[2m,[0m[31m327-329
@checklist/core:test:coverage: [0m[1m[31m src/state/SecretsDetector.ts                    [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  34.70[0m[2m | [0m[31m87-103[0m[2m,[0m[31m107-131[0m[2m,[0m[31m135[0m[2m,[0m[31m139[0m[2m,[0m[31m143-158[0m[2m,[0m[31m167[0m[2m,[0m[31m174-181[0m[2m,[0m[31m188-195[0m[2m,[0m[31m203-226[0m[2m,[0m[31m233-274
@checklist/core:test:coverage: [0m[1m[31m src/state/SecurityAudit.ts                      [0m[2m | [0m[1m[31m   9.09[0m[2m | [0m[1m[31m  15.65[0m[2m | [0m[31m71-271[0m[2m,[0m[31m276-280[0m[2m,[0m[31m287-318[0m[2m,[0m[31m325[0m[2m,[0m[31m332-356
@checklist/core:test:coverage: [0m[1m[31m src/state/SecurityAuditFileManager.ts           [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   2.99[0m[2m | [0m[31m19-79[0m[2m,[0m[31m84-152
@checklist/core:test:coverage: [0m[1m[31m src/state/SecurityEventLogger.ts                [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  17.07[0m[2m | [0m[31m14-33[0m[2m,[0m[31m37-45[0m[2m,[0m[31m49[0m[2m,[0m[31m53[0m[2m,[0m[31m57[0m[2m,[0m[31m61-63[0m[2m,[0m[31m68[0m[2m,[0m[31m72-79[0m[2m,[0m[31m83[0m[2m,[0m[31m87-109
@checklist/core:test:coverage: [0m[1m[31m src/state/SecuritySpecialEvents.ts              [0m[2m | [0m[1m[31m  10.00[0m[2m | [0m[1m[31m   3.89[0m[2m | [0m[31m10-142[0m[2m,[0m[31m146-154[0m[2m,[0m[31m159-173[0m[2m,[0m[31m177-181[0m[2m,[0m[31m185-195
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should validate temp directory nullish coalescing[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should validate template literal construction in paths[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should validate Windows-specific environment variable usage[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should validate XDG environment variable usage[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should return non-empty paths[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should contain "checklist" in all paths except temp[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should get macOS user data directory[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should get Windows user data directory[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should use APPDATA when available on Windows[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should get Linux user data directory[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should use XDG_DATA_HOME on Linux when available[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should get temp directory with TMPDIR[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should use default temp directory when no env vars are set[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should use TEMP when TMPDIR is not available[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should get cache directory on macOS[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should use LOCALAPPDATA on Windows for cache[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mpaths[2m >[0m[1m should use XDG_CACHE_HOME on Linux when available[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect clipboard availability[0m [0m[2m[[1m13.40ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should complete without error for hasClipboard[0m [0m[2m[[1m12.29ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate clipboard import error handling[0m [0m[2m[[1m10.45ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate clipboard dynamic import behavior[0m [0m[2m[[1m10.07ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should return boolean for hasGit[0m [0m[2m[6.76ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should complete without error for hasGit[0m [0m[2m[6.32ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should handle Git command gracefully[0m [0m[2m[6.00ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate Git spawn process creation[0m [0m[2m[5.81ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate Git process exit code checking[0m [0m[2m[5.77ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate Git try/catch error handling[0m [0m[2m[5.78ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect color support in CI[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect explicit color support[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect color support from TERM[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect Windows Terminal color support[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect ConEmu color support[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate CI color detection precedence[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate explicit color support detection[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate Windows color support detection[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate fallback to TTY detection[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect Unicode support from locale[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect Unicode support from LC_ALL[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should not detect Unicode support without UTF-8[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should detect Unicode support with UTF-8 regex variations[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate Unicode nullish coalescing logic[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfeatures[2m >[0m[1m should validate Unicode regex pattern matching[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfallbacks[2m >[0m[1m should provide clipboard write fallback[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfallbacks[2m >[0m[1m should provide clipboard read fallback[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfallbacks[2m >[0m[1m should provide color fallback[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfallbacks[2m >[0m[1m should provide unicode fallback[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/core:test:coverage: [0m[1m[31m src/state/SecurityStatistics.ts                 [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  12.50[0m[2m | [0m[31m12-35[0m[2m,[0m[31m39-51[0m[2m,[0m[31m55-58[0m[2m,[0m[31m62-66[0m[2m,[0m[31m70-81[0m[2m,[0m[31m85-91[0m[2m,[0m[31m95-100[0m[2m,[0m[31m104-109
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfallbacks[2m >[0m[1m should validate unicode fallback logic[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfallbacks[2m >[0m[1m should validate color fallback returns plain text[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mfallbacks[2m >[0m[1m should validate clipboard fallback error messages[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should generate macOS open command[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should generate Windows open command[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should generate Linux open command[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should generate Windows clear command[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should generate Unix clear command[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should generate Windows shell command[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should generate Unix shell command[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should use default shell when shell is empty[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should validate shell platform detection logic[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/core:test:coverage: [0m[1m[31m src/state/TransactionCoordinator.ts             [0m[2m | [0m[1m[31m  65.38[0m[2m | [0m[1m[31m  51.61[0m[2m | [0m[31m54-63[0m[2m,[0m[31m89-135[0m[2m,[0m[31m142-150[0m[2m,[0m[31m171-194
@checklist/core:test:coverage: [0m[1m[31m src/state/TransactionLogger.ts                  [0m[2m | [0m[1m[31m  64.29[0m[2m | [0m[1m[31m  46.34[0m[2m | [0m[31m91-127[0m[2m,[0m[31m134-136[0m[2m,[0m[31m140-187
@checklist/core:test:coverage: [0m[1m[31m src/state/TransactionManager.ts                 [0m[2m | [0m[1m[31m  52.38[0m[2m | [0m[1m[31m  66.31[0m[2m | [0m[31m50-56[0m[2m,[0m[31m60-68[0m[2m,[0m[31m72-85[0m[2m,[0m[31m153-155[0m[2m,[0m[31m159[0m[2m,[0m[31m167-169[0m[2m,[0m[31m173-176[0m[2m,[0m[31m180-184[0m[2m,[0m[31m228-244
@checklist/core:test:coverage: [0m[1m[31m src/state/TransactionRecovery.ts                [0m[2m | [0m[1m[31m   4.17[0m[2m | [0m[1m[31m   6.98[0m[2m | [0m[31m17-44[0m[2m,[0m[31m48-49[0m[2m,[0m[31m53-79[0m[2m,[0m[31m83-120[0m[2m,[0m[31m125-171[0m[2m,[0m[31m175-184[0m[2m,[0m[31m188-204[0m[2m,[0m[31m209-215[0m[2m,[0m[31m219[0m[2m,[0m[31m223-241[0m[2m,[0m[31m245-270[0m[2m,[0m[31m274-291
@checklist/core:test:coverage: [0m[1m[31m src/state/WALFileManager.ts                     [0m[2m | [0m[1m[31m  54.55[0m[2m | [0m[1m[31m  43.37[0m[2m | [0m[31m56-78[0m[2m,[0m[31m89-112
@checklist/core:test:coverage: [0m[1m[31m src/state/WALRateLimiter.ts                     [0m[2m | [0m[1m[31m  60.00[0m[2m | [0m[1m[31m  88.57[0m[2m | [0m[31m51-54
@checklist/core:test:coverage: [0m[1m[31m src/state/WriteAheadLog.ts                      [0m[2m | [0m[1m[31m  50.00[0m[2m | [0m[1m[31m  27.17[0m[2m | [0m[31m59-97[0m[2m,[0m[31m102-126[0m[2m,[0m[31m147-170[0m[2m,[0m[31m175-212
@checklist/tui:build: cache hit, replaying logs 412955c1d654350b
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should validate shell default value logic[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should validate clear command platform logic[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should validate open command platform logic[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/core:test:coverage: [0m[1m[32m src/state/constants.ts                          [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/core:test:coverage: [0m[1m[31m src/state/errors.ts                             [0m[2m | [0m[1m[31m  33.33[0m[2m | [0m[1m[31m  61.36[0m[2m | [0m[31m25-29[0m[2m,[0m[31m35-39[0m[2m,[0m[31m45-46[0m[2m,[0m[31m52-56
@checklist/core:test:coverage: [0m[1m[31m src/state/manager/MigrationManager.ts           [0m[2m | [0m[1m[31m   7.69[0m[2m | [0m[1m[31m   6.35[0m[2m | [0m[31m17-43[0m[2m,[0m[31m47-64[0m[2m,[0m[31m69-200
@checklist/core:test:coverage: [0m[1m[32m src/state/manager/StateInitializer.ts           [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/core:test:coverage: [0m[1m[31m src/state/manager/StateLoader.ts                [0m[2m | [0m[1m[31m   9.09[0m[2m | [0m[1m[31m   7.41[0m[2m | [0m[31m17-49[0m[2m,[0m[31m53-59[0m[2m,[0m[31m64-173
@checklist/core:test:coverage: [0m[1m[31m src/state/manager/StateManager.ts               [0m[2m | [0m[1m[31m  29.41[0m[2m | [0m[1m[31m  50.00[0m[2m | [0m[31m81-139[0m[2m,[0m[31m144[0m[2m,[0m[31m148-153
@checklist/core:test:coverage: [0m[1m[31m src/state/manager/StateSaver.ts                 [0m[2m | [0m[1m[31m   8.33[0m[2m | [0m[1m[31m   9.55[0m[2m | [0m[31m39-68[0m[2m,[0m[31m72-183
@checklist/core:test:coverage: [0m[1m[32m src/state/migrations/BackupManager.ts           [0m[2m | [0m[1m[32m  96.00[0m[2m | [0m[1m[32m  95.76[0m[2m | [0m[31m205-211@checklist/core:test:coverage: 
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/MigrationBackupHandler.ts  [0m[2m | [0m[1m[31m  88.89[0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[31m38-44
@checklist/core:test:coverage: [0m[1m[32m src/state/migrations/MigrationExecutor.ts       [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should validate special character handling in commands[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mcommands[2m >[0m[1m should handle special characters in file paths for open command[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mEdge Cases[2m >[0m[1m should handle multiple calls to detectEnvironment consistently[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mEdge Cases[2m >[0m[1m should handle multiple path calls consistently[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mEdge Cases[2m >[0m[1m should handle concurrent feature detection[0m [0m[2m[9.38ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should return true when COLORTERM is defined and not empty[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should return false when COLORTERM is undefined[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should return false when COLORTERM is empty string[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should return true when TERM includes color[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should return false when TERM is undefined[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should return false when TERM is empty string[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should return false when TERM does not include color[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should validate COLORTERM !== undefined check[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should validate COLORTERM !== empty check[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should validate TERM !== undefined check[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should validate TERM !== empty check[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should validate TERM.includes(color) check[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:build: 
@checklist/tui:build: [0m[2m[35m$[0m [2m[1mbun build ./src/index.ts --outdir=../../dist/packages/tui --target=bun[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should validate && operator in COLORTERM check[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should validate && operator in TERM check[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should validate string literal in includes check[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasExplicitColorSupport()[2m >[0m[1m should test all return paths[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:build: [32mBundled 226 modules in 28ms[0m
@checklist/tui:build: 
@checklist/tui:build:   [34mindex.js[33m  0.71 MB  [2m(entry point)[0m
@checklist/tui:build: 
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/MigrationHelpers.ts        [0m[2m | [0m[1m[31m  77.78[0m[2m | [0m[1m[31m  73.24[0m[2m | [0m[31m38-50[0m[2m,[0m[31m68[0m[2m,[0m[31m72-76
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/MigrationRecordKeeper.ts   [0m[2m | [0m[1m[31m  43.48[0m[2m | [0m[1m[31m  33.94[0m[2m | [0m[31m32[0m[2m,[0m[31m37-41[0m[2m,[0m[31m97-101[0m[2m,[0m[31m120-202[0m[2m,[0m[31m207-225[0m[2m,[0m[31m229-233[0m[2m,[0m[31m237-293[0m[2m,[0m[31m316-321
@checklist/core:test:coverage: [0m[1m[32m src/state/migrations/MigrationRegistry.ts       [0m[2m | [0m[1m[32m  95.00[0m[2m | [0m[1m[32m  91.72[0m[2m | [0m[31m204-215
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/MigrationRunner.ts         [0m[2m | [0m[1m[31m  87.10[0m[2m | [0m[1m[31m  88.08[0m[2m | [0m[31m99-105[0m[2m,[0m[31m108-117[0m[2m,[0m[31m292-305
@checklist/core:test:coverage: [0m[1m[32m src/state/migrations/MigrationRunnerHelpers.ts  [0m[2m | [0m[1m[32m  95.45[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/MigrationUtils.ts          [0m[2m | [0m[1m[31m  60.00[0m[2m | [0m[1m[31m  61.48[0m[2m | [0m[31m7-23[0m[2m,[0m[31m78-88[0m[2m,[0m[31m121[0m[2m,[0m[31m126-143
@checklist/core:test:coverage: [0m[1m[32m src/state/migrations/MigrationValidator.ts      [0m[2m | [0m[1m[32m  96.88[0m[2m | [0m[1m[32m  97.72[0m[2m | [0m[31m39-43
@checklist/core:test:coverage: [0m[1m[32m src/state/migrations/PathFinder.ts              [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/SchemaValidator.ts         [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  20.00[0m[2m | [0m[31m10-16[0m[2m,[0m[31m23-30[0m[2m,[0m[31m38-44[0m[2m,[0m[31m52-56[0m[2m,[0m[31m63-68[0m[2m,[0m[31m75[0m[2m,[0m[31m82-84[0m[2m,[0m[31m92[0m[2m,[0m[31m99[0m[2m,[0m[31m106-110
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/StateMigrationHandler.ts   [0m[2m | [0m[1m[31m  33.33[0m[2m | [0m[1m[31m  12.00[0m[2m | [0m[31m8-28
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/VersionDetector.ts         [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  23.91[0m[2m | [0m[31m10-16[0m[2m,[0m[31m23-25[0m[2m,[0m[31m32[0m[2m,[0m[31m39[0m[2m,[0m[31m46-53[0m[2m,[0m[31m61[0m[2m,[0m[31m68[0m[2m,[0m[31m75-87
@checklist/core:test:coverage: [0m[1m[32m src/state/migrations/scripts/index.ts           [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should return true when WT_SESSION is defined and not empty[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should return true when ConEmuDir is defined and not empty[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should return false when both are undefined[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should return false when both are empty strings[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should return false when WT_SESSION is undefined[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should return false when WT_SESSION is empty[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should return false when ConEmuDir is undefined[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should return false when ConEmuDir is empty[0m
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/scripts/v0_0_0_to_v0_1_0.ts[0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[31m  79.59[0m[2m | [0m[31m35-44
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/scripts/v0_1_0_to_v0_2_0.ts[0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[31m  69.39[0m[2m | [0m[31m27-41
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/scripts/v0_2_0_to_v1_0_0.ts[0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[31m  61.25[0m[2m | [0m[31m53-60[0m[2m,[0m[31m72-73[0m[2m,[0m[31m94-100[0m[2m,[0m[31m104-124[0m[2m,[0m[31m128-140[0m[2m,[0m[31m182-192
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/types.ts                   [0m[2m | [0m[1m[31m  40.00[0m[2m | [0m[1m[31m  64.86[0m[2m | [0m[31m106-107[0m[2m,[0m[31m127-131[0m[2m,[0m[31m135-140
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should validate || operator in check[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should validate WT_SESSION !== undefined check[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should validate WT_SESSION !== empty check[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should validate ConEmuDir !== undefined check[0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should validate ConEmuDir !== empty check[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasWindowsColorSupport()[2m >[0m[1m should validate && operators in both parts[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasColor() - Conditional Chain[2m >[0m[1m should return true for CI and skip other checks[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/core:test:coverage: [0m[1m[31m src/state/migrations/versionDetection.ts        [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   5.22[0m[2m | [0m[31m5-13[0m[2m,[0m[31m17-35[0m[2m,[0m[31m39-54[0m[2m,[0m[31m58-59[0m[2m,[0m[31m63-65[0m[2m,[0m[31m73-90[0m[2m,[0m[31m94[0m[2m,[0m[31m98-104[0m[2m,[0m[31m108-115[0m[2m,[0m[31m119-135[0m[2m,[0m[31m139-155[0m[2m,[0m[31m159-163[0m[2m,[0m[31m167-175[0m[2m,[0m[31m179-208[0m[2m,[0m[31m212-236[0m[2m,[0m[31m241-250[0m[2m,[0m[31m254-268[0m[2m,[0m[31m272-280[0m[2m,[0m[31m284-299
@checklist/core:test:coverage: [0m[1m[31m src/state/validation.ts                         [0m[2m | [0m[1m[32m  92.86[0m[2m | [0m[1m[31m  83.72[0m[2m | [0m[31m103-116
@checklist/core:test:coverage: [0m[1m[31m src/utils/logger.ts                             [0m[2m | [0m[1m[31m  62.50[0m[2m | [0m[1m[31m  51.46[0m[2m | [0m[31m62[0m[2m,[0m[31m179-189[0m[2m,[0m[31m194-201[0m[2m,[0m[31m205-213[0m[2m,[0m[31m217-231[0m[2m,[0m[31m235-242[0m[2m,[0m[31m246-250[0m[2m,[0m[31m254-265[0m[2m,[0m[31m269-280[0m[2m,[0m[31m284-297[0m[2m,[0m[31m301-320
@checklist/core:test:coverage: [0m[1m[31m src/workflow/NavigationHelper.ts                [0m[2m | [0m[1m[31m  88.89[0m[2m | [0m[1m[32m  92.65[0m[2m | [0m[31m112-116
@checklist/core:test:coverage: [0m[1m[31m src/workflow/StateManager.ts                    [0m[2m | [0m[1m[31m  40.00[0m[2m | [0m[1m[31m  47.37[0m[2m | [0m[31m68-80[0m[2m,[0m[31m87-88[0m[2m,[0m[31m95-101[0m[2m,[0m[31m108-117[0m[2m,[0m[31m124-131
@checklist/core:test:coverage: [0m[1m[31m src/workflow/WorkflowEngine.ts                  [0m[2m | [0m[1m[31m  88.24[0m[2m | [0m[1m[31m  85.08[0m[2m | [0m[31m98-121[0m[2m,[0m[31m217[0m[2m,[0m[31m333-337[0m[2m,[0m[31m341-347
@checklist/core:test:coverage: [0m[1m[31m src/workflow/WorkflowNavigator.ts               [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[31m  60.62[0m[2m | [0m[31m75-108[0m[2m,[0m[31m112-114[0m[2m,[0m[31m150-162[0m[2m,[0m[31m177-189
@checklist/core:test:coverage: [0m[1m[31m src/workflow/WorkflowStateManager.ts            [0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[31m  71.35[0m[2m | [0m[31m52-56[0m[2m,[0m[31m60-66[0m[2m,[0m[31m94-103[0m[2m,[0m[31m108-119[0m[2m,[0m[31m124-130[0m[2m,[0m[31m134-141
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasColor() - Conditional Chain[2m >[0m[1m should check explicit color support second[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasColor() - Conditional Chain[2m >[0m[1m should check Windows color support third[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasColor() - Conditional Chain[2m >[0m[1m should fallback to TTY check[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasColor() - Conditional Chain[2m >[0m[1m should validate CI check returns true[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasColor() - Conditional Chain[2m >[0m[1m should validate explicit check returns true[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Color Support Detection[2m > [0mhasColor() - Conditional Chain[2m >[0m[1m should validate Windows check returns true[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: cache hit, replaying logs 0f23b625d205d9a9
@checklist/core:test:coverage: [0m[1m[31m src/workflow/WorkflowValidator.ts               [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[31m  49.10[0m[2m | [0m[31m65-74[0m[2m,[0m[31m138-169[0m[2m,[0m[31m174-183[0m[2m,[0m[31m199-221[0m[2m,[0m[31m226-231[0m[2m,[0m[31m235-266
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasGit() - Error Handling[2m >[0m[1m should return true when git command succeeds[0m [0m[2m[6.48ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasGit() - Error Handling[2m >[0m[1m should return false when git command fails[0m [0m[2m[6.59ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasGit() - Error Handling[2m >[0m[1m should validate exit code === 0 check[0m [0m[2m[6.14ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasGit() - Error Handling[2m >[0m[1m should validate git spawn arguments[0m [0m[2m[5.16ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasGit() - Error Handling[2m >[0m[1m should validate spawn options[0m [0m[2m[5.88ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasGit() - Error Handling[2m >[0m[1m should handle spawn errors[0m [0m[2m[6.14ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasClipboard() - Error Handling[2m >[0m[1m should return boolean for clipboard check[0m [0m[2m[[1m10.40ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasClipboard() - Error Handling[2m >[0m[1m should validate clipboard import path[0m [0m[2m[[1m10.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasClipboard() - Error Handling[2m >[0m[1m should handle import errors[0m [0m[2m[9.98ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasClipboard() - Error Handling[2m >[0m[1m should call isClipboardAvailable when import succeeds[0m [0m[2m[[1m10.34ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - Git and Clipboard Detection[2m > [0mhasClipboard() - Error Handling[2m >[0m[1m should return false when catch block executes[0m [0m[2m[9.73ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - String Literals and Regex[2m > [0mhasUnicode() - String Literals[2m >[0m[1m should use empty string fallback not other value[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - String Literals and Regex[2m > [0mhasUnicode() - String Literals[2m >[0m[1m should validate regex pattern /UTF-?8$/i[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - String Literals and Regex[2m > [0mhasUnicode() - String Literals[2m >[0m[1m should validate regex $ anchor[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[32m✓[0m [0mEnvironment Detection[2m > [0mMutation Testing - String Literals and Regex[2m > [0mhasUnicode() - String Literals[2m >[0m[1m should validate regex case insensitive flag[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[2m--------------------|---------|---------|-------------------[0m
@checklist/shared:test:coverage: File                [2m|[0m % Funcs [2m|[0m % Lines [2m|[0m Uncovered Line #s
@checklist/shared:test:coverage: [2m--------------------|---------|---------|-------------------[0m
@checklist/core:test:coverage: [0m[1m[31m src/workflow/conditions.ts                      [0m[2m | [0m[1m[31m  64.71[0m[2m | [0m[1m[31m  58.33[0m[2m | [0m[31m18-19[0m[2m,[0m[31m43[0m[2m,[0m[31m50[0m[2m,[0m[31m56[0m[2m,[0m[31m65[0m[2m,[0m[31m70[0m[2m,[0m[31m98-108[0m[2m,[0m[31m110[0m[2m,[0m[31m114-122[0m[2m,[0m[31m126-135[0m[2m,[0m[31m149-150[0m[2m,[0m[31m152-153[0m[2m,[0m[31m157-160[0m[2m,[0m[31m182[0m[2m,[0m[31m188-191[0m[2m,[0m[31m194-195[0m[2m,[0m[31m204[0m[2m,[0m[31m210[0m[2m,[0m[31m212-215
@checklist/core:test:coverage: [0m[1m[31m src/workflow/errors.ts                          [0m[2m | [0m[1m[31m  50.00[0m[2m | [0m[1m[31m  70.59[0m[2m | [0m[31m36-41[0m[2m,[0m[31m47-49[0m[2m,[0m[31m55-60
@checklist/shared:test:coverage: [0m[1m[32mAll files          [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m  99.18[0m[2m |[0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[2m[35m$[0m [2m[1mbun test --coverage[0m
@checklist/cli:test:coverage: [0m[1mbun test [0m[2mv1.2.23 (cf136713)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/errors.test.ts:
@checklist/core:test:coverage: [0m[1m[31m src/workflow/types.ts                           [0m[2m | [0m[1m[31m  22.22[0m[2m | [0m[1m[31m  48.08[0m[2m | [0m[31m137[0m[2m,[0m[31m141[0m[2m,[0m[31m147-153[0m[2m,[0m[31m159-164[0m[2m,[0m[31m170-175[0m[2m,[0m[31m181-186
@checklist/core:test:coverage: [0m[1m[31m src/workflow/validators.ts                      [0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[31m  42.86[0m[2m | [0m[31m9[0m[2m,[0m[31m12-14[0m[2m,[0m[31m20-21[0m[2m,[0m[31m24-27[0m[2m,[0m[31m40-49
@checklist/core:test:coverage: [0m[1m[32m tests/setup.ts                                  [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m  92.59[0m[2m | [0m[31m27
@checklist/core:test:coverage: [0m[1m[31m ../tui/tests/test-mocks/PinoLoggerMock.ts       [0m[2m | [0m[1m[31m  22.73[0m[2m | [0m[1m[31m  30.77[0m[2m | [0m[31m46[0m[2m,[0m[31m57-60[0m[2m,[0m[31m74-118[0m[2m,[0m[31m123[0m[2m,[0m[31m127[0m[2m,[0m[31m131[0m[2m,[0m[31m135[0m[2m,[0m[31m143[0m[2m,[0m[31m147-155[0m[2m,[0m[31m159[0m[2m,[0m[31m163[0m[2m,[0m[31m167[0m[2m,[0m[31m171[0m[2m,[0m[31m199-215[0m[2m,[0m[31m219-235[0m[2m,[0m[31m239-266[0m[2m,[0m[31m281-285
@checklist/core:test:coverage: [0m[1m[31m ../tui/tests/test-mocks/TestLoggerMock.ts       [0m[2m | [0m[1m[31m  22.50[0m[2m | [0m[1m[31m  11.84[0m[2m | [0m[31m79-93[0m[2m,[0m[31m97-111[0m[2m,[0m[31m117-170[0m[2m,[0m[31m176-274[0m[2m,[0m[31m280-377[0m[2m,[0m[31m382-403[0m[2m,[0m[31m407-421[0m[2m,[0m[31m425-523[0m[2m,[0m[31m527-579[0m[2m,[0m[31m584[0m[2m,[0m[31m588[0m[2m,[0m[31m592[0m[2m,[0m[31m596[0m[2m,[0m[31m600[0m[2m,[0m[31m604[0m[2m,[0m[31m608[0m[2m,[0m[31m612[0m[2m,[0m[31m621[0m[2m,[0m[31m625[0m[2m,[0m[31m629-630[0m[2m,[0m[31m634[0m[2m,[0m[31m638[0m[2m,[0m[31m642[0m[2m,[0m[31m646[0m[2m,[0m[31m650-654[0m[2m,[0m[31m658[0m[2m,[0m[31m662-664[0m[2m,[0m[31m678-687[0m[2m,[0m[31m691-700[0m[2m,[0m[31m704-719[0m[2m,[0m[31m734-738
@checklist/core:test:coverage: [0m[2m--------------------------------------------------|---------|---------|-------------------[0m
@checklist/core:test:coverage: 
@checklist/core:test:coverage: [0m[32m 118 pass[0m
@checklist/core:test:coverage:  [0m[33m8 skip[0m
@checklist/core:test:coverage: [0m[2m 0 fail[0m
@checklist/core:test:coverage:  338 expect() calls
@checklist/core:test:coverage: Ran 126 tests across 9 files. [0m[2m[[1m1274.00ms[0m[2m][0m
@checklist/shared:test:coverage: [0m[1m[32m src/clipboard.ts  [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/shared:test:coverage: [0m[1m[32m src/environment.ts[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m  96.72[0m[2m | [0m[31m130[0m[2m,[0m[31m146[0m[2m,[0m[31m161-162
@checklist/shared:test:coverage: [0m[1m[32m src/index.ts      [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/shared:test:coverage: [0m[1m[32m src/terminal.ts   [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/shared:test:coverage: [0m[2m--------------------|---------|---------|-------------------[0m
@checklist/shared:test:coverage: 
@checklist/shared:test:coverage: [0m[32m 401 pass[0m
@checklist/shared:test:coverage: [0m[2m 0 fail[0m
@checklist/shared:test:coverage:  704 expect() calls
@checklist/shared:test:coverage: Ran 401 tests across 4 files. [0m[2m[[1m2.11s[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIError[2m >[0m[1m should create CLIError with default options[0m [0m[2m[1.66ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIError[2m >[0m[1m should create CLIError with custom options[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIError[2m >[0m[1m should be instanceof Error[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIError[2m >[0m[1m should maintain stack trace[0m [0m[2m[0.39ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mValidationError[2m >[0m[1m should create ValidationError with default values[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mValidationError[2m >[0m[1m should create ValidationError with recovery message[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mValidationError[2m >[0m[1m should be instanceof CLIError[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandNotFoundError[2m >[0m[1m should create CommandNotFoundError without suggestions[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandNotFoundError[2m >[0m[1m should create CommandNotFoundError with suggestions[0m [0m[2m[0.28ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandNotFoundError[2m >[0m[1m should handle empty suggestions array[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandNotFoundError[2m >[0m[1m should be instanceof CLIError[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPermissionError[2m >[0m[1m should create PermissionError with resource information[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPermissionError[2m >[0m[1m should handle different resource types[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPermissionError[2m >[0m[1m should be instanceof CLIError[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle CLIError correctly[0m [0m[2m[1.97ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle CLIError without recovery message[0m [0m[2m[0.40ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle generic Error with debug mode[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle generic Error without debug mode[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle string error[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle unknown error type[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle null/undefined error[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should not show debug suggestion for successful exit[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle ValidationError specifically[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle CommandNotFoundError with suggestions[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mhandle[2m >[0m[1m should handle PermissionError[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mcreateErrorDetails[2m >[0m[1m should create error details for CLIError[0m [0m[2m[0.52ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mcreateErrorDetails[2m >[0m[1m should create error details for generic Error[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mcreateErrorDetails[2m >[0m[1m should create error details for unknown error type[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mcreateErrorDetails[2m >[0m[1m should create error details for null[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mErrorHandler[2m > [0mcreateErrorDetails[2m >[0m[1m should create error details for string[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mExit Code Integration[2m >[0m[1m should use correct exit codes for different error types[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mExit Code Integration[2m >[0m[1m should allow custom exit codes[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mNODE_ENV=test behavior[2m >[0m[1m should throw error instead of exiting when NODE_ENV=test[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mNODE_ENV=test behavior[2m >[0m[1m should throw error instead of exiting when NODE_ENV=test with debug[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mNODE_ENV=test behavior[2m >[0m[1m should throw error instead of exiting when NODE_ENV=test with recovery[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mTESTING=true behavior[2m >[0m[1m should throw error instead of exiting when TESTING=true[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mTESTING=true behavior[2m >[0m[1m should throw error instead of exiting when TESTING=true with debug false[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mBoth environment variables set[2m >[0m[1m should throw error when both NODE_ENV=test and TESTING=true[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mBoth environment variables set[2m >[0m[1m should throw error when NODE_ENV=test and TESTING=any value[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mProduction environment behavior[2m >[0m[1m should exit process when not in test environment[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mProduction environment behavior[2m >[0m[1m should exit process when NODE_ENV is undefined[0m [0m[2m[0.58ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mProduction environment behavior[2m >[0m[1m should exit process when TESTING is not "true"[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mDebug flag variations[2m >[0m[1m should handle debug flag correctly in test environment[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mDebug flag variations[2m >[0m[1m should handle debug flag correctly in production environment[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mEnvironment-Specific Error Handling[2m > [0mDebug flag variations[2m >[0m[1m should handle debug=false flag correctly in test environment[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/index.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mapplication initialization[2m >[0m[1m should initialize with all default commands[0m [0m[2m[0.15ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mapplication initialization[2m >[0m[1m should create CLIApplication instance[0m [0m[2m[[1m43.72ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flag handling[2m >[0m[1m should handle version flag detection[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flag handling[2m >[0m[1m should handle help flag detection[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flag handling[2m >[0m[1m should show version output[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flag handling[2m >[0m[1m should show help content[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mcommand execution[2m >[0m[1m should detect unknown commands[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mcommand execution[2m >[0m[1m should detect known commands[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mcommand execution[2m >[0m[1m should show init command output format[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0merror handling integration[2m >[0m[1m should detect debug flag for error reporting[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0margument parsing integration[2m >[0m[1m should handle no arguments[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0margument parsing integration[2m >[0m[1m should validate input for security[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mexit code handling[2m >[0m[1m should define exit codes[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mexit code handling[2m >[0m[1m should have correct exit code values[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mmodule exports[2m >[0m[1m should export version string[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mmodule exports[2m >[0m[1m should export necessary classes and functions[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mdetailed command registration[2m >[0m[1m should register all commands during initialization[0m [0m[2m[[1m62.26ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mdetailed command registration[2m >[0m[1m should register correct number of commands[0m [0m[2m[[1m13.18ms[0m[2m][0m
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flags handling - detailed[2m >[0m[1m should handle --version flag[0m [0m[2m[[1m18.36ms[0m[2m][0m
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flags handling - detailed[2m >[0m[1m should handle -v flag[0m [0m[2m[[1m10.90ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new checklist project (i)
@checklist/cli:test:coverage:   run          Run a checklist workflow (r, start)
@checklist/cli:test:coverage:   add          Add template to project (a)
@checklist/cli:test:coverage:   status       Show current state/progress (st)
@checklist/cli:test:coverage:   reset        Reset checklist state (clear)
@checklist/cli:test:coverage:   list         List available templates (ls)
@checklist/cli:test:coverage:   migrate      Run database migrations or manage backups (m)
@checklist/cli:test:coverage:   performance  Performance analysis and profiling commands (perf)
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flags handling - detailed[2m >[0m[1m should handle --help flag[0m [0m[2m[8.30ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new checklist project (i)
@checklist/cli:test:coverage:   run          Run a checklist workflow (r, start)
@checklist/cli:test:coverage:   add          Add template to project (a)
@checklist/cli:test:coverage:   status       Show current state/progress (st)
@checklist/cli:test:coverage:   reset        Reset checklist state (clear)
@checklist/cli:test:coverage:   list         List available templates (ls)
@checklist/cli:test:coverage:   migrate      Run database migrations or manage backups (m)
@checklist/cli:test:coverage:   performance  Performance analysis and profiling commands (perf)
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flags handling - detailed[2m >[0m[1m should handle -h flag[0m [0m[2m[9.06ms[0m[2m][0m
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flags handling - detailed[2m >[0m[1m should handle version as command[0m [0m[2m[[1m13.74ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flags handling - detailed[2m >[0m[1m should handle help as command[0m [0m[2m[[1m10.30ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mglobal flags handling - detailed[2m >[0m[1m should return false when no global flags are present[0m [0m[2m[8.29ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mdebug flag detection[2m >[0m[1m should return true when --debug flag is present[0m [0m[2m[6.69ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mdebug flag detection[2m >[0m[1m should return false when --debug flag is absent[0m [0m[2m[7.35ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mdebug flag detection[2m >[0m[1m should check exact --debug string[0m [0m[2m[[1m11.48ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mcommand execution flow[2m >[0m[1m should execute normal command flow[0m [0m[2m[7.33ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[31mError: Unknown command: unknown-cmd[0m
@checklist/cli:test:coverage: [0m[31mSuggestion: Did you mean: init?[0m
@checklist/cli:test:coverage: [0m[31mUse --debug for more details[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mcommand execution flow[2m >[0m[1m should handle unknown command with suggestions[0m [0m[2m[6.83ms[0m[2m][0m
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mcommand execution flow[2m >[0m[1m should not execute command when global flag returns true[0m [0m[2m[7.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0merror handling in main flow[2m >[0m[1m should handle errors with debug flag[0m [0m[2m[9.47ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0merror handling in main flow[2m >[0m[1m should handle errors without debug flag[0m [0m[2m[9.21ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mprocess event handlers[2m >[0m[1m should set up uncaught exception handler[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mprocess event handlers[2m >[0m[1m should set up unhandled rejection handler[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mimport.meta.main behavior[2m >[0m[1m should handle import.meta.main true[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mEnvironment-specific error handling[2m >[0m[1m should handle errors in NODE_ENV=test environment[0m [0m[2m[6.66ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mEnvironment-specific error handling[2m >[0m[1m should handle errors in TESTING=true environment[0m [0m[2m[6.77ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mEnvironment-specific error handling[2m >[0m[1m should handle errors in both NODE_ENV=test and TESTING=true[0m [0m[2m[6.53ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mEnvironment-specific error handling[2m >[0m[1m should exit in production environment[0m [0m[2m[9.41ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mEnvironment-specific error handling[2m >[0m[1m should handle debug flag correctly with environment[0m [0m[2m[6.89ms[0m[2m][0m
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mBoolean logic edge cases for global flags[2m >[0m[1m should handle version flag with various boolean combinations[0m [0m[2m[[1m92.40ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mBoolean logic edge cases for global flags[2m >[0m[1m should handle help flag with various boolean combinations[0m [0m[2m[[1m110.71ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mBoolean logic edge cases for global flags[2m >[0m[1m should handle falsy values for version and help flags[0m [0m[2m[[1m85.10ms[0m[2m][0m
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: checklist version 0.0.1
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mBoolean logic edge cases for global flags[2m >[0m[1m should handle truthy values for version and help flags[0m [0m[2m[[1m62.58ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mProcess event handlers edge cases[2m >[0m[1m should handle uncaughtException with debug flag variations[0m [0m[2m[2.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mProcess event handlers edge cases[2m >[0m[1m should handle unhandledRejection with debug flag variations[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mProcess event handlers edge cases[2m >[0m[1m should handle different error types in process handlers[0m [0m[2m[0.15ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mimport.meta.main edge cases[2m >[0m[1m should handle main execution with debug flag[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mimport.meta.main edge cases[2m >[0m[1m should handle main execution without debug flag[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCLIApplication[2m > [0mBoolean flag edge cases[2m >[0m[1m should handle edge cases in hasDebugFlag[0m [0m[2m[[1m98.49ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/parser.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should return default args when no arguments provided[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse simple command with no options[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse command with positional arguments[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse long flags with values using =[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse long flags with values using space[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse boolean flags correctly[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse short flags[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse combined short flags[0m [0m[2m[0.30ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse short flags with values[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should parse positional arguments after flags[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mparse[2m >[0m[1m should handle complex argument combinations[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should pass validation for valid input[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should throw error for too many arguments[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should throw error for argument too long[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should throw error for invalid template name[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should pass validation for valid template name[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should throw error for unsafe config path with ..[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should throw error for unsafe config path with ~[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should pass validation for safe config path[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mvalidateInput[2m >[0m[1m should handle short config flag (-c)[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mBoolean flag detection[2m >[0m[1m should recognize known boolean flags[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mBoolean flag detection[2m >[0m[1m should treat unknown flags as boolean by default[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mEdge cases[2m >[0m[1m should handle empty string arguments[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mEdge cases[2m >[0m[1m should handle arguments starting with dash but not flags[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mEdge cases[2m >[0m[1m should handle double dash arguments correctly[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mEdge cases[2m >[0m[1m should handle flag at the end without value[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mEdge cases[2m >[0m[1m should handle multiple dashes in flag names[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mPerformance considerations[2m >[0m[1m should handle large number of arguments efficiently[0m [0m[2m[0.31ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mArray checks and object literals[2m >[0m[1m should handle empty _ array in options[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mArray checks and object literals[2m >[0m[1m should handle _ array with arguments[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mArray checks and object literals[2m >[0m[1m should handle various _ array states[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mArray checks and object literals[2m >[0m[1m should handle array length checks correctly[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mBoolean logic and edge cases[2m >[0m[1m should handle skipNext boolean flag correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mBoolean logic and edge cases[2m >[0m[1m should handle argument parsing with various flag patterns[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mBoolean logic and edge cases[2m >[0m[1m should handle edge cases in argument processing[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mBoolean logic and edge cases[2m >[0m[1m should handle equality operator edge cases[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: cache hit, replaying logs 20da5bf64d39035e
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mString literal and array method edge cases[2m >[0m[1m should handle various flag name patterns[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mString literal and array method edge cases[2m >[0m[1m should handle array mutations correctly[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mString literal and array method edge cases[2m >[0m[1m should handle object literal edge cases in options[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mComplex parsing scenarios[2m >[0m[1m should handle mixed argument types[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mComplex parsing scenarios[2m >[0m[1m should handle boundary conditions in command detection[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandParser[2m > [0mMutation Score Improvement Tests[2m > [0mComplex parsing scenarios[2m >[0m[1m should handle edge cases in validation[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/tui:test:coverage: 
@checklist/tui:test:coverage: [0m[2m[35m$[0m [2m[1mbun test --coverage[0m
@checklist/tui:test:coverage: [0m[1mbun test [0m[2mv1.2.23 (cf136713)[0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/terminal/WarningMessagesDisplay.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should display warnings for missing color support[0m [0m[2m[[1m26.24ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should display warnings for missing Unicode support[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should display warnings for limited terminal features[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [?1049h[?1049l[0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should provide terminal upgrade suggestions[0m [0m[2m[[1m16.96ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should implement progressive feature disclosure[0m [0m[2m[1.77ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should display warnings in TUI header/footer[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should prioritize warnings by severity[0m [0m[2m[0.58ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should provide actionable remediation steps[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should handle warning dismissal and persistence[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: tests/registry.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mregister[2m >[0m[1m should register a command successfully[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mregister[2m >[0m[1m should register command aliases successfully[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mregister[2m >[0m[1m should allow multiple commands to be registered[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mget[2m >[0m[1m should retrieve command by exact name[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mget[2m >[0m[1m should retrieve command by alias[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mget[2m >[0m[1m should return undefined for non-existent command[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mget[2m >[0m[1m should prefer exact name match over alias[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mhas[2m >[0m[1m should return true for existing command[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mhas[2m >[0m[1m should return true for existing alias[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mhas[2m >[0m[1m should return false for non-existent command[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mgetAllCommands[2m >[0m[1m should return empty array when no commands registered[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mgetAllCommands[2m >[0m[1m should return all registered commands without duplicates[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mgetSuggestions[2m >[0m[1m should return suggestions for similar command names[0m [0m[2m[2.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mgetSuggestions[2m >[0m[1m should return suggestions for similar aliases[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mgetSuggestions[2m >[0m[1m should return empty array for completely different input[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mgetSuggestions[2m >[0m[1m should limit suggestions to maximum of 3[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mgetSuggestions[2m >[0m[1m should return suggestions sorted by Levenshtein distance[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should integrate with debug overlay for detailed info[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mWarning Messages Display[2m > [0mUser-Facing Warning System[2m >[0m[1m should display terminal recommendation based on platform[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/terminal/TerminalSizeValidator.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Validation[2m >[0m[1m should validate acceptable terminal size[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Validation[2m >[0m[1m should detect undersized terminal width[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Validation[2m >[0m[1m should detect undersized terminal height[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Validation[2m >[0m[1m should detect both width and height issues[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Validation[2m >[0m[1m should handle undefined terminal dimensions[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Requirements Check[2m >[0m[1m should return true when terminal meets minimum size[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Requirements Check[2m >[0m[1m should return false when terminal is too narrow[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Requirements Check[2m >[0m[1m should return false when terminal is too short[0m [0m[2m[0.22ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mgetSuggestions[2m >[0m[1m should handle empty input gracefully[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mLevenshtein Distance Calculation[2m >[0m[1m should calculate correct distance for identical strings[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mCommandRegistry[2m > [0mLevenshtein Distance Calculation[2m >[0m[1m should handle strings with special characters[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Adjustment Calculations[2m >[0m[1m should return needed:false when no adjustment needed[0m [0m[2m[0.18ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Adjustment Calculations[2m >[0m[1m should calculate width adjustment needed[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Adjustment Calculations[2m >[0m[1m should calculate height adjustment needed[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mSize Adjustment Calculations[2m >[0m[1m should calculate both width and height adjustment[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mError Message Generation[2m >[0m[1m should generate empty message for valid size[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mError Message Generation[2m >[0m[1m should generate detailed error message for undersized terminal[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[31m
@checklist/tui:test:coverage: ============================================================[0m
@checklist/tui:test:coverage: [0m[31mTERMINAL SIZE ERROR[0m
@checklist/tui:test:coverage: [0m[31m============================================================[0m
@checklist/tui:test:coverage: [0m[31mTerminal size too small: 70x20 (minimum: 80x24)
@checklist/tui:test:coverage: 
@checklist/tui:test:coverage: Suggestions:
@checklist/tui:test:coverage: 1. Make terminal wider by at least 10 columns
@checklist/tui:test:coverage: 2. Make terminal taller by at least 4 rows
@checklist/tui:test:coverage: 3. On macOS: Drag corner of terminal window or use ⌘+ to zoom
@checklist/tui:test:coverage: 4. Try: osascript -e 'tell application "Terminal" to set bounds of front window to {0, 0, 800, 600}'
@checklist/cli:test:coverage: tests/commands/migrate.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse check option correctly[0m [0m[2m[7.39ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse dry-run option correctly[0m [0m[2m[6.82ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse dryRun (camelCase) option correctly[0m [0m[2m[5.45ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse backup-only option correctly[0m [0m[2m[5.40ms[0m[2m][0m
@checklist/tui:test:coverage: 5. iTerm2: Use ⌘+Enter for fullscreen mode[0m
@checklist/tui:test:coverage: [0m[31m============================================================
@checklist/tui:test:coverage: [0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse backupOnly (camelCase) option correctly[0m [0m[2m[6.65ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse list-backups option correctly[0m [0m[2m[7.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse listBackups (camelCase) option correctly[0m [0m[2m[6.46ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse restore option correctly[0m [0m[2m[5.91ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should parse verbose option correctly[0m [0m[2m[7.15ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mparseOptions[2m >[0m[1m should use default values when options are not provided[0m [0m[2m[5.76ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mhasRestoreOption[2m >[0m[1m should return true when restore option is a non-empty string[0m [0m[2m[5.35ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mhasRestoreOption[2m >[0m[1m should return false when restore option is empty string[0m [0m[2m[5.67ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mError Message Generation[2m >[0m[1m should include suggestions when enabled[0m [0m[2m[0.97ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[31m
@checklist/tui:test:coverage: ============================================================[0m
@checklist/tui:test:coverage: [0m[31mTERMINAL SIZE ERROR[0m
@checklist/tui:test:coverage: [0m[31m============================================================[0m
@checklist/tui:test:coverage: [0m[31mTerminal size too small: 70x20 (minimum: 80x24)[0m
@checklist/tui:test:coverage: [0m[31m============================================================
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mError Message Generation[2m >[0m[1m should not include suggestions when disabled[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mPlatform-Specific Suggestions[2m >[0m[1m should provide macOS-specific suggestions[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mPlatform-Specific Suggestions[2m >[0m[1m should provide Linux-specific suggestions[0m [0m[2m[0.19ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mPlatform-Specific Suggestions[2m >[0m[1m should provide Windows-specific suggestions[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mTerminal Program Detection[2m >[0m[1m should provide iTerm2-specific suggestions[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mTerminal Program Detection[2m >[0m[1m should provide Alacritty-specific suggestions[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mTerminal Program Detection[2m >[0m[1m should provide generic terminal suggestions[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mConfiguration[2m >[0m[1m should allow custom minimum size[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mConfiguration[2m >[0m[1m should update configuration dynamically[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mConfiguration[2m >[0m[1m should enable/disable suggestions[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mInteractive Terminal Detection[2m >[0m[1m should detect interactive terminal[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mInteractive Terminal Detection[2m >[0m[1m should detect non-interactive terminal[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mhasRestoreOption[2m >[0m[1m should return false when restore option is undefined[0m [0m[2m[5.73ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mhasRestoreOption[2m >[0m[1m should return true when restore option is boolean true[0m [0m[2m[7.49ms[0m[2m][0m
@checklist/cli:test:coverage: [32m✅ No migration needed[39m
@checklist/cli:test:coverage:   Current version: 1.0.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0maction[2m >[0m[1m should execute migration command without errors[0m [0m[2m[6.41ms[0m[2m][0m
@checklist/cli:test:coverage: [32m✅ No migration needed[39m
@checklist/cli:test:coverage:   Current version: 1.0.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0maction[2m >[0m[1m should handle null options gracefully[0m [0m[2m[5.33ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[31m[31mMigration error:[39m [0m[1m235 |[0m     it([0m[32m'should handle migration errors and exit'[0m, [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m236 |[0m       [0m[2m// Mock StateManager to throw error[0m
@checklist/cli:test:coverage: [0m[1m237 |[0m       [0m[35mconst[0m errorStateManager = {
@checklist/cli:test:coverage: [0m[1m238 |[0m         ...mockStateManager,
@checklist/cli:test:coverage: [0m[1m239 |[0m         checkMigrationStatus: [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m240 |[0m           [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Migration failed'[0m)[0m[2m;[0m
@checklist/cli:test:coverage:                       [31m[1m^[0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mMigration failed[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m240[0m[2m:[33m17[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mcheckMigrationStatus[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m239[0m[2m:[33m43[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrunMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m198[0m[2m:[33m44[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrunMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m190[0m[2m:[33m30[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigrationCommand[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m107[0m[2m:[33m18[0m[2m)[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mResize Attempts[2m >[0m[1m should return false when auto-resize is disabled[0m [0m[2m[0.15ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mResize Attempts[2m >[0m[1m should handle resize attempts gracefully[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mCurrent Size Information[2m >[0m[1m should return current terminal size[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigrationCommand[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m92[0m[2m:[33m41[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3maction[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m52[0m[2m:[33m18[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3maction[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m48[0m[2m:[33m16[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m260[0m[2m:[33m28[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m235[0m[2m:[33m51[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0maction[2m >[0m[1m should handle migration errors and exit[0m [0m[2m[[1m13.80ms[0m[2m][0m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [32m✅ State file is up to date[39m
@checklist/cli:test:coverage:   Version: 1.0.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mexecuteMigrationCommand[2m >[0m[1m should execute check when check option is true[0m [0m[2m[5.73ms[0m[2m][0m
@checklist/cli:test:coverage: [36mAvailable backups:[39m
@checklist/cli:test:coverage: [37m[39m
@checklist/cli:test:coverage: [37mBackup files:[39m
@checklist/cli:test:coverage:   1. v1.0.0 - 2024-01-01T12:00:00Z (1.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage:   2. v0.9.0 - 2024-01-02T12:00:00Z (2.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup2.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mexecuteMigrationCommand[2m >[0m[1m should execute listBackups when listBackups option is true[0m [0m[2m[5.25ms[0m[2m][0m
@checklist/cli:test:coverage: [36mRestoring from backup: backup.json[39m
@checklist/cli:test:coverage: [32m✅ Successfully restored from backup[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mexecuteMigrationCommand[2m >[0m[1m should execute restoreBackup when restore option is provided[0m [0m[2m[5.33ms[0m[2m][0m
@checklist/cli:test:coverage: [36mCreating backup...[39m
@checklist/cli:test:coverage: [32m✅ Backup created for version 1.0.0[39m
@checklist/cli:test:coverage:   Path: [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mexecuteMigrationCommand[2m >[0m[1m should execute createBackupOnly when backupOnly option is true[0m [0m[2m[5.58ms[0m[2m][0m
@checklist/cli:test:coverage: [32m✅ No migration needed[39m
@checklist/cli:test:coverage:   Current version: 1.0.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mexecuteMigrationCommand[2m >[0m[1m should execute runMigration when no specific option is provided[0m [0m[2m[8.34ms[0m[2m][0m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [33mMigration needed:[39m
@checklist/cli:test:coverage:   Current version: [31m1.0.0[39m
@checklist/cli:test:coverage:   Target version:  [32m1.1.0[39m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mMigration path:[39m
@checklist/cli:test:coverage:   1. v1.0.0-to-v1.0.1
@checklist/cli:test:coverage:   2. v1.0.1-to-v1.1.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mcheckMigrationStatus[2m >[0m[1m should display migration needed status[0m [0m[2m[6.17ms[0m[2m][0m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [32m✅ State file is up to date[39m
@checklist/cli:test:coverage:   Version: 1.1.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mcheckMigrationStatus[2m >[0m[1m should display up to date status[0m [0m[2m[6.97ms[0m[2m][0m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [33mMigration needed:[39m
@checklist/cli:test:coverage:   Current version: [31m1.0.0[39m
@checklist/cli:test:coverage:   Target version:  [32m1.1.0[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mcheckMigrationStatus[2m >[0m[1m should handle empty migration path[0m [0m[2m[6.61ms[0m[2m][0m
@checklist/cli:test:coverage: [36mAvailable backups:[39m
@checklist/cli:test:coverage: [37m[39m
@checklist/cli:test:coverage: [37mBackup files:[39m
@checklist/cli:test:coverage:   1. v1.0.0 - 2024-01-01T12:00:00Z (1.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage:   2. v0.9.0 - 2024-01-02T12:00:00Z (2.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup2.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mlistBackups[2m >[0m[1m should display available backups[0m [0m[2m[8.74ms[0m[2m][0m
@checklist/cli:test:coverage: [36mAvailable backups:[39m
@checklist/cli:test:coverage: [33mNo backups found[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mlistBackups[2m >[0m[1m should display no backups message when list is empty[0m [0m[2m[5.74ms[0m[2m][0m
@checklist/cli:test:coverage: [36mAvailable backups:[39m
@checklist/cli:test:coverage: [37m[39m
@checklist/cli:test:coverage: [37mBackup files:[39m
@checklist/cli:test:coverage:   1. v1.0.0 - 2024-01-01T12:00:00Z (1.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage:   2. v0.9.0 - 2024-01-02T12:00:00Z (2.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup2.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mlistBackups[2m >[0m[1m should format backup sizes correctly[0m [0m[2m[6.10ms[0m[2m][0m
@checklist/cli:test:coverage: [36mRestoring from backup: backup.json[39m
@checklist/cli:test:coverage: [32m✅ Successfully restored from backup[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mrestoreBackup[2m >[0m[1m should restore backup successfully[0m [0m[2m[5.75ms[0m[2m][0m
@checklist/cli:test:coverage: [36mRestoring from backup: invalid-backup.json[39m
@checklist/cli:test:coverage: [0m[31m[31mFailed to restore backup:[39m [0m[1m440 |[0m       expect(consoleSpy.log)[0m[3m[1m.toHaveBeenCalledWith[0m(expect[0m[3m[1m.stringContaining[0m([0m[32m'Successfully restored from backup'[0m))[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m441 |[0m     })[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m442 |[0m 
@checklist/cli:test:coverage: [0m[1m443 |[0m     it([0m[32m'should handle restore errors'[0m, [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m444 |[0m       mockStateManager.restoreFromBackup = [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m445 |[0m         [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Restore failed'[0m)[0m[2m;[0m
@checklist/cli:test:coverage:                     [31m[1m^[0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mRestore failed[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m445[0m[2m:[33m15[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m444[0m[2m:[33m56[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrestoreBackup[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m165[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrestoreBackup[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m161[0m[2m:[33m31[0m[2m)[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mCurrent Size Information[2m >[0m[1m should handle undefined dimensions gracefully[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mEdge Cases[2m >[0m[1m should handle very small terminals[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mEdge Cases[2m >[0m[1m should handle very large terminals[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator[2m > [0mEdge Cases[2m >[0m[1m should handle exactly minimum size[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/terminal/EnvironmentDetector.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgatherEnvironmentInfo[2m >[0m[1m should gather environment information[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgatherEnvironmentInfo[2m >[0m[1m should have valid term value[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgatherEnvironmentInfo[2m >[0m[1m should detect session types correctly[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0misRemoteSession[2m >[0m[1m should detect SSH session[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0misRemoteSession[2m >[0m[1m should detect local session[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0misRemoteSession[2m >[0m[1m should handle undefined SSH properly[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgetSessionType[2m >[0m[1m should identify SSH session[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgetSessionType[2m >[0m[1m should identify tmux session[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgetSessionType[2m >[0m[1m should identify screen session[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgetSessionType[2m >[0m[1m should identify local session[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgetSessionType[2m >[0m[1m should prioritize SSH over other session types[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m449[0m[2m:[33m32[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m443[0m[2m:[33m40[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mrestoreBackup[2m >[0m[1m should handle restore errors[0m [0m[2m[[1m11.61ms[0m[2m][0m
@checklist/cli:test:coverage: [36mCreating backup...[39m
@checklist/cli:test:coverage: [32m✅ Backup created for version 1.0.0[39m
@checklist/cli:test:coverage:   Path: [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mcreateBackupOnly[2m >[0m[1m should create backup successfully[0m [0m[2m[9.16ms[0m[2m][0m
@checklist/cli:test:coverage: [36mCreating backup...[39m
@checklist/cli:test:coverage: [32m✅ Backup created for version 1.0.0[39m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgetTerminalProgram[2m >[0m[1m should return terminal program when available[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgetTerminalProgram[2m >[0m[1m should return undefined when no terminal program is set[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mgetTerminalProgram[2m >[0m[1m should handle empty terminal program[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mhasColorSupport[2m >[0m[1m should detect color support from colorTerm[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mhasColorSupport[2m >[0m[1m should detect color support from term name[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mhasColorSupport[2m >[0m[1m should detect no color support for dumb terminal[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mhasColorSupport[2m >[0m[1m should handle unknown terminal conservatively[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mintegration tests[2m >[0m[1m should work with real environment[0m [0m[2m[0.39ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mintegration tests[2m >[0m[1m should maintain consistency across multiple calls[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0mintegration tests[2m >[0m[1m should handle edge cases gracefully[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mEnvironmentDetector[2m > [0menvironment sanitization[2m >[0m[1m should sanitize gathered environment info[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/terminal/FallbackRenderer.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mInitialization[2m >[0m[1m should create with default options[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mInitialization[2m >[0m[1m should create with custom options[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mRenderer Factories[2m >[0m[1m should create minimal renderer[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mRenderer Factories[2m >[0m[1m should create modern renderer[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mContent Rendering[2m >[0m[1m should render content without modifications for capable terminals[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mContent Rendering[2m >[0m[1m should strip colors for terminals without color support[0m [0m[2m[0.18ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mContent Rendering[2m >[0m[1m should convert unicode for terminals without unicode support[0m [0m[2m[0.62ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mContent Rendering[2m >[0m[1m should handle both color and unicode limitations[0m [0m[2m[0.34ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mContent Rendering[2m >[0m[1m should limit dimensions when specified[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mCompatibility Checking[2m >[0m[1m should check compatibility for capable terminals[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mCompatibility Checking[2m >[0m[1m should detect color compatibility issues[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mCompatibility Checking[2m >[0m[1m should detect unicode compatibility issues[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mCompatibility Checking[2m >[0m[1m should detect minimal terminal compatibility issues[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mCompatibility Checking[2m >[0m[1m should handle null or undefined capabilities[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mTest Rendering[2m >[0m[1m should provide detailed test results[0m [0m[2m[0.95ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mTest Rendering[2m >[0m[1m should track applied fallbacks[0m [0m[2m[0.17ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mFallback Management[2m >[0m[1m should add custom fallbacks[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mFallback Management[2m >[0m[1m should remove fallbacks[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mFallback Management[2m >[0m[1m should sort fallbacks by priority[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mOption Updates[2m >[0m[1m should update options dynamically[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mOption Updates[2m >[0m[1m should preserve existing options when updating partially[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mEdge Cases[2m >[0m[1m should handle empty content[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mEdge Cases[2m >[0m[1m should handle content with only ANSI codes[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mEdge Cases[2m >[0m[1m should handle very long content[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackRenderer[2m > [0mEdge Cases[2m >[0m[1m should handle complex unicode sequences[0m [0m[2m[0.18ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mDefault Fallbacks[2m >[0m[1m should create default fallbacks[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mDefault Fallbacks[2m >[0m[1m should have fallbacks for common compatibility issues[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should detect color support from capabilities[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should detect unicode support from capabilities[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should detect minimal terminals[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should handle null capabilities[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should strip ANSI colors[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should strip all ANSI escapes[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should convert to ASCII[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should simplify box drawing[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should limit dimensions[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage:   Path: [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mcreateBackupOnly[2m >[0m[1m should display backup path when backups exist[0m [0m[2m[6.47ms[0m[2m][0m
@checklist/cli:test:coverage: [32m✅ No migration needed[39m
@checklist/cli:test:coverage:   Current version: 1.1.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mrunMigration[2m >[0m[1m should show no migration needed when status is up to date[0m [0m[2m[5.86ms[0m[2m][0m
@checklist/cli:test:coverage: [36mStarting migration...[39m
@checklist/cli:test:coverage:   From: [33m1.0.0[39m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUtility Functions[2m >[0m[1m should simplify layout[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/terminal/TerminalSizeValidator-simple.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mConfiguration[2m >[0m[1m should use default configuration[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mConfiguration[2m >[0m[1m should allow custom configuration[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mConfiguration[2m >[0m[1m should update configuration dynamically[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mCurrent Size Information[2m >[0m[1m should return current terminal size[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mCurrent Size Information[2m >[0m[1m should detect interactive terminal[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mResize Attempts[2m >[0m[1m should return false for resize attempts by default[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mResize Attempts[2m >[0m[1m should handle resize attempts gracefully[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage:   To:   [32m1.1.0[39m
@checklist/cli:test:coverage: [33m[39m
@checklist/cli:test:coverage: [33m🔍 Dry run mode - no changes will be made[39m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mMigrations that would be applied:[39m
@checklist/cli:test:coverage:   1. v1.0.0-to-v1.0.1
@checklist/cli:test:coverage: [32m[39m
@checklist/cli:test:coverage: [32m✅ Dry run completed successfully[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mrunMigration[2m >[0m[1m should show dry run info when dryRun is true[0m [0m[2m[5.96ms[0m[2m][0m
@checklist/cli:test:coverage: [36mStarting migration...[39m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mMessage Generation[2m >[0m[1m should generate empty message when terminal size is acceptable[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mMessage Generation[2m >[0m[1m should generate error message for undersized terminal[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mMessage Generation[2m >[0m[1m should include suggestions when enabled[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mMessage Generation[2m >[0m[1m should not include suggestions when disabled[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mSize Requirements Check[2m >[0m[1m should validate size with different requirements[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mSize Requirements Check[2m >[0m[1m should provide size adjustment information when needed[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mSize Requirements Check[2m >[0m[1m should return needed:false for size adjustment when not needed[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mEdge Cases[2m >[0m[1m should handle zero minimum size[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mEdge Cases[2m >[0m[1m should handle negative minimum size[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mEdge Cases[2m >[0m[1m should handle extremely large minimum size[0m
@checklist/cli:test:coverage:   From: [33m1.0.0[39m
@checklist/cli:test:coverage:   To:   [32m1.1.0[39m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mApplying migrations...[39m
@checklist/cli:test:coverage: [32m[39m
@checklist/cli:test:coverage: [32m🎉 Migration completed successfully![39m
@checklist/cli:test:coverage:   New version: 1.1.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mrunMigration[2m >[0m[1m should execute migration when not dry run[0m [0m[2m[7.89ms[0m[2m][0m
@checklist/cli:test:coverage: [33m[39m
@checklist/cli:test:coverage: [33m🔍 Dry run mode - no changes will be made[39m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mMigrations that would be applied:[39m
@checklist/cli:test:coverage:   1. v1.0.0-to-v1.0.1
@checklist/cli:test:coverage: [32m[39m
@checklist/cli:test:coverage: [32m✅ Dry run completed successfully[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mshowDryRunInfo[2m >[0m[1m should display dry run message[0m [0m[2m[5.61ms[0m[2m][0m
@checklist/cli:test:coverage: [33m[39m
@checklist/cli:test:coverage: [33m🔍 Dry run mode - no changes will be made[39m
@checklist/cli:test:coverage: [32m[39m
@checklist/cli:test:coverage: [32m✅ Dry run completed successfully[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mshowDryRunInfo[2m >[0m[1m should handle empty migration path[0m [0m[2m[5.25ms[0m[2m][0m
@checklist/cli:test:coverage: [33m[39m
@checklist/cli:test:coverage: [33m🔍 Dry run mode - no changes will be made[39m
@checklist/cli:test:coverage: [32m[39m
@checklist/cli:test:coverage: [32m✅ Dry run completed successfully[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mshowDryRunInfo[2m >[0m[1m should handle undefined migration path[0m [0m[2m[5.26ms[0m[2m][0m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mApplying migrations...[39m
@checklist/cli:test:coverage: [32m[39m
@checklist/cli:test:coverage: [32m🎉 Migration completed successfully![39m
@checklist/cli:test:coverage:   New version: 1.1.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mexecuteMigration[2m >[0m[1m should execute migration successfully[0m [0m[2m[5.75ms[0m[2m][0m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mApplying migrations...[39m
@checklist/cli:test:coverage: [0m[31m[31m[39m
@checklist/cli:test:coverage: [31m❌ Migration failed:[39m [0m[1m560 |[0m       expect(consoleSpy.log)[0m[3m[1m.toHaveBeenCalledWith[0m(expect[0m[3m[1m.stringContaining[0m([0m[32m'Migration completed successfully'[0m))[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m561 |[0m     })[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m562 |[0m 
@checklist/cli:test:coverage: [0m[1m563 |[0m     it([0m[32m'should handle migration errors'[0m, [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m564 |[0m       mockStateManager.loadState = [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m565 |[0m         [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Migration failed'[0m)[0m[2m;[0m
@checklist/cli:test:coverage:                     [31m[1m^[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mSuggestions Generation[2m >[0m[1m should generate platform-specific suggestions[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mSuggestions Generation[2m >[0m[1m should generate terminal-specific suggestions[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mValidation Results Structure[2m >[0m[1m should return properly structured validation results[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminalSizeValidator (Simple Tests)[2m > [0mValidation Results Structure[2m >[0m[1m should include accurate dimensions in validation results[0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/terminal/FallbackUtils.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAnsiColors[2m >[0m[1m should strip basic ANSI color codes[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAnsiColors[2m >[0m[1m should strip ANSI color codes with multiple parameters[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAnsiColors[2m >[0m[1m should handle content without ANSI codes[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAnsiColors[2m >[0m[1m should strip multiple ANSI color sequences[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAnsiColors[2m >[0m[1m should handle empty string[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAnsiColors[2m >[0m[1m should preserve non-color ANSI codes[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAllAnsiEscapes[2m >[0m[1m should strip all ANSI escape sequences[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAllAnsiEscapes[2m >[0m[1m should handle complex ANSI sequences[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAllAnsiEscapes[2m >[0m[1m should preserve non-ANSI content[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mANSI code handling[2m > [0mstripAllAnsiEscapes[2m >[0m[1m should handle empty string[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mconvertToAscii[2m >[0m[1m should replace Unicode characters with ASCII equivalents[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mconvertToAscii[2m >[0m[1m should preserve ASCII characters[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mconvertToAscii[2m >[0m[1m should replace unknown Unicode characters with default replacement[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mconvertToAscii[2m >[0m[1m should handle mixed ASCII and Unicode content[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mconvertToAscii[2m >[0m[1m should handle empty string[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mconvertToAscii[2m >[0m[1m should replace Unicode characters based on code ranges[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mreplaceUnicodeCharacter[2m >[0m[1m should replace characters based on Unicode code ranges[0m [0m[2m[0.30ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mreplaceUnicodeCharacter[2m >[0m[1m should handle surrogate pairs[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mgetUnicodeReplacement[2m >[0m[1m should return appropriate replacements for Unicode ranges[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mUnicode handling[2m > [0mgetUnicodeReplacement[2m >[0m[1m should handle edge cases[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mMigration failed[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m565[0m[2m:[33m15[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m564[0m[2m:[33m48[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m246[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m242[0m[2m:[33m34[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m569[0m[2m:[33m32[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m563[0m[2m:[33m42[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [33mYour data has been backed up and can be restored[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mexecuteMigration[2m >[0m[1m should handle migration errors[0m [0m[2m[8.19ms[0m[2m][0m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [33mMigration needed:[39m
@checklist/cli:test:coverage:   Current version: [31m1.0.0[39m
@checklist/cli:test:coverage:   Target version:  [32m1.1.0[39m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mMigration path:[39m
@checklist/cli:test:coverage:   1. v1.0.0-to-v1.0.1
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mconsole output testing[2m >[0m[1m should output specific strings that mutations try to change[0m [0m[2m[5.56ms[0m[2m][0m
@checklist/cli:test:coverage: [36mRestoring from backup: invalid.json[39m
@checklist/cli:test:coverage: [0m[31m[31mFailed to restore backup:[39m [0m[1m440 |[0m       expect(consoleSpy.log)[0m[3m[1m.toHaveBeenCalledWith[0m(expect[0m[3m[1m.stringContaining[0m([0m[32m'Successfully restored from backup'[0m))[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m441 |[0m     })[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m442 |[0m 
@checklist/cli:test:coverage: [0m[1m443 |[0m     it([0m[32m'should handle restore errors'[0m, [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m444 |[0m       mockStateManager.restoreFromBackup = [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m445 |[0m         [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Restore failed'[0m)[0m[2m;[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitDimensions[2m >[0m[1m should limit content height when exceeding maxHeight[0m [0m[2m[0.21ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitDimensions[2m >[0m[1m should not limit height when within maxHeight[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitDimensions[2m >[0m[1m should limit content width when exceeding maxWidth[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitDimensions[2m >[0m[1m should not limit width when within maxWidth[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitDimensions[2m >[0m[1m should handle both height and width limiting[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitDimensions[2m >[0m[1m should handle empty content[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitDimensions[2m >[0m[1m should handle single line content[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitDimensions[2m >[0m[1m should handle infinite dimensions[0m [0m[2m[0.28ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitHeight[2m >[0m[1m should truncate height when exceeding maxHeight[0m [0m[2m[0.26ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitHeight[2m >[0m[1m should not truncate when within maxHeight[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitWidth[2m >[0m[1m should truncate lines when exceeding maxWidth[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mdimension limiting[2m > [0mlimitWidth[2m >[0m[1m should not truncate when within maxWidth[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0msimplifyBoxDrawing[2m >[0m[1m should replace Unicode box drawing characters with ASCII equivalents[0m [0m[2m[0.19ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0msimplifyBoxDrawing[2m >[0m[1m should handle double-line box characters[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0msimplifyBoxDrawing[2m >[0m[1m should handle rounded corners[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0msimplifyBoxDrawing[2m >[0m[1m should handle mixed box drawing characters[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0msimplifyBoxDrawing[2m >[0m[1m should preserve non-box-drawing characters[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0msimplifyBoxDrawing[2m >[0m[1m should handle empty string[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0msimplifyBoxDrawing[2m >[0m[1m should handle content without box drawing[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0mgetBoxReplacements[2m >[0m[1m should return complete mapping of box drawing characters[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0mapplyBoxReplacements[2m >[0m[1m should apply all replacements to content[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0mapplyBoxReplacements[2m >[0m[1m should handle multiple occurrences of the same character[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mbox drawing simplification[2m > [0mapplyBoxReplacements[2m >[0m[1m should handle empty replacements map[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mlayout simplification[2m > [0msimplifyLayout[2m >[0m[1m should reduce excessive spacing[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mlayout simplification[2m > [0msimplifyLayout[2m >[0m[1m should simplify indentation[0m [0m[2m[0.33ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mlayout simplification[2m > [0msimplifyLayout[2m >[0m[1m should reduce excessive newlines[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage:                     [31m[1m^[0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mRestore failed[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m445[0m[2m:[33m15[0m[2m)[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mlayout simplification[2m > [0msimplifyLayout[2m >[0m[1m should simplify horizontal rules[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mlayout simplification[2m > [0msimplifyLayout[2m >[0m[1m should remove Unicode formatting characters[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mlayout simplification[2m > [0msimplifyLayout[2m >[0m[1m should handle complex content with multiple issues[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mlayout simplification[2m > [0msimplifyLayout[2m >[0m[1m should handle empty string[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mlayout simplification[2m > [0msimplifyLayout[2m >[0m[1m should preserve normal content[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0misMinimalTerminal[2m >[0m[1m should return true for null capabilities[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0misMinimalTerminal[2m >[0m[1m should return true for undefined capabilities[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0misMinimalTerminal[2m >[0m[1m should return true for terminals with low color support[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0misMinimalTerminal[2m >[0m[1m should return true for minimal terminal types[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0misMinimalTerminal[2m >[0m[1m should return false for capable terminals[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0misMinimalTerminal[2m >[0m[1m should return false when colors property is missing[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasUnicodeSupport[2m >[0m[1m should return false for null capabilities[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasUnicodeSupport[2m >[0m[1m should return false for undefined capabilities[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasUnicodeSupport[2m >[0m[1m should return true for UTF-8 encoding[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasUnicodeSupport[2m >[0m[1m should return true for UTF-8 in LANG variable[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasUnicodeSupport[2m >[0m[1m should return true for case-insensitive UTF-8 variants[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasUnicodeSupport[2m >[0m[1m should return false for non-UTF-8 encodings[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasUnicodeSupport[2m >[0m[1m should return false when encoding is missing[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasColorSupport[2m >[0m[1m should return false for null capabilities[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m444[0m[2m:[33m56[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrestoreBackup[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m165[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrestoreBackup[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m161[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m599[0m[2m:[33m30[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m598[0m[2m:[33m50[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mconsole output testing[2m >[0m[1m should output error messages correctly[0m [0m[2m[5.46ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test command name and description string literals[0m [0m[2m[5.63ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test option description string literals[0m [0m[2m[7.31ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test constructor default parameter[0m [0m[2m[[1m15.46ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test normalizeOptions method with null and undefined[0m [0m[2m[5.89ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[31m[31mMigration error:[39m [0m[1m663 |[0m     it([0m[32m'should test error message strings in action method'[0m, [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m664 |[0m       [0m[2m// Mock StateManager to throw error[0m
@checklist/cli:test:coverage: [0m[1m665 |[0m       [0m[35mconst[0m errorStateManager = {
@checklist/cli:test:coverage: [0m[1m666 |[0m         ...mockStateManager,
@checklist/cli:test:coverage: [0m[1m667 |[0m         checkMigrationStatus: [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m668 |[0m           [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Test migration error'[0m)[0m[2m;[0m
@checklist/cli:test:coverage:                       [31m[1m^[0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mTest migration error[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m668[0m[2m:[33m17[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mcheckMigrationStatus[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m667[0m[2m:[33m43[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrunMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m198[0m[2m:[33m44[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrunMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m190[0m[2m:[33m30[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigrationCommand[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m107[0m[2m:[33m18[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigrationCommand[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m92[0m[2m:[33m41[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3maction[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m52[0m[2m:[33m18[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3maction[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m48[0m[2m:[33m16[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m686[0m[2m:[33m28[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m663[0m[2m:[33m62[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test error message strings in action method[0m [0m[2m[[1m12.99ms[0m[2m][0m
@checklist/cli:test:coverage: [36mAvailable backups:[39m
@checklist/cli:test:coverage: [37m[39m
@checklist/cli:test:coverage: [37mBackup files:[39m
@checklist/cli:test:coverage:   1. v1.0.0 - 2024-01-01T12:00:00Z (2.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage:   2. v0.9.0 - 2024-01-02T12:00:00Z (1.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup2.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test arithmetic operations in listBackups[0m [0m[2m[7.13ms[0m[2m][0m
@checklist/cli:test:coverage: [36mAvailable backups:[39m
@checklist/cli:test:coverage: [33mNo backups found[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test conditional expression in listBackups when no backups exist[0m [0m[2m[6.43ms[0m[2m][0m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [33mMigration needed:[39m
@checklist/cli:test:coverage:   Current version: [31m1.0.0[39m
@checklist/cli:test:coverage:   Target version:  [32m1.1.0[39m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mMigration path:[39m
@checklist/cli:test:coverage:   1. v1.0.0-to-v1.0.1
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasColorSupport[2m >[0m[1m should return false for undefined capabilities[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasColorSupport[2m >[0m[1m should return true for terminals with 8 or more colors[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasColorSupport[2m >[0m[1m should return false for terminals with less than 8 colors[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasColorSupport[2m >[0m[1m should return false when colors property is missing[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mcapability detection[2m > [0mhasColorSupport[2m >[0m[1m should handle non-numeric colors property[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mperformance and edge cases[2m >[0m[1m should handle very large content efficiently[0m [0m[2m[0.20ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mperformance and edge cases[2m >[0m[1m should handle content with many Unicode characters[0m [0m[2m[0.36ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mperformance and edge cases[2m >[0m[1m should handle content with many ANSI codes[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mperformance and edge cases[2m >[0m[1m should handle invalid regex patterns gracefully[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mFallbackUtils[2m > [0mperformance and edge cases[2m >[0m[1m should handle edge case with very long lines[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/terminal/ColorSupport.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mBasic Detection[2m >[0m[1m should detect basic color support from environment[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mBasic Detection[2m >[0m[1m should handle NO_COLOR environment variable[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mBasic Detection[2m >[0m[1m should handle FORCE_COLOR environment variable[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mBasic Detection[2m >[0m[1m should detect dumb terminal[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0m256 Color Detection[2m >[0m[1m should detect 256 color from TERM variable[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0m256 Color Detection[2m >[0m[1m should detect 256 color from COLORTERM[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mTrue Color Detection[2m >[0m[1m should detect true color from COLORTERM[0m [0m[2m[1.37ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mTrue Color Detection[2m >[0m[1m should detect true color from TERM_PROGRAM[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Level and Format[2m >[0m[1m should return correct color level[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Level and Format[2m >[0m[1m should get best supported format[0m [0m[2m[4.20ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Level and Format[2m >[0m[1m should format colors safely[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Level and Format[2m >[0m[1m should handle out of range color values[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Conversion[2m >[0m[1m should convert RGB to 256-color index[0m [0m[2m[0.33ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Conversion[2m >[0m[1m should convert RGB to 16-color index[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Test Generation[2m >[0m[1m should create color test string[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Test Generation[2m >[0m[1m should handle no color support[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mColor Support Summary[2m >[0m[1m should generate color support summary[0m [0m[2m[7.72ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mCache Management[2m >[0m[1m should clear cache[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mEnvironment Detection[2m >[0m[1m should handle CI environments[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mEnvironment Detection[2m >[0m[1m should detect specific CI platforms[0m [0m[2m[4.55ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mTerminal Capabilities Lookup[2m >[0m[1m should have terminal capability mappings[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mTerminal Capabilities Lookup[2m >[0m[1m should have program capability mappings[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mColorSupport[2m > [0mTerminal Capabilities Lookup[2m >[0m[1m should get color support from capability mapping[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/performance/ChromeDevToolsIntegration.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0minitialization[2m >[0m[1m should create instance without errors[0m [0m[2m[0.17ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0minitialization[2m >[0m[1m should provide singleton instance[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mavailability detection[2m >[0m[1m should have isAvailable method[0m [0m[2m[0.18ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mavailability detection[2m >[0m[1m should handle unavailable inspector gracefully[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mdebugger URL[2m >[0m[1m should return debugger URL or null[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mdebugger URL[2m >[0m[1m should not throw when getting URL[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mstatus report generation[2m >[0m[1m should generate status report[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mstatus report generation[2m >[0m[1m should include availability status in report[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mstatus report generation[2m >[0m[1m should include usage instructions[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mprofiling methods error handling[2m >[0m[1m should handle unavailable DevTools gracefully[0m [0m[2m[1.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mprofiling methods error handling[2m >[0m[1m should handle unavailable heap profiler gracefully[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mprofiling methods error handling[2m >[0m[1m should handle GC data collection gracefully[0m [0m[2m[0.36ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mmethod existence[2m >[0m[1m should have all required async methods[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mmethod existence[2m >[0m[1m should have sync utility methods[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0merror messages[2m >[0m[1m should provide helpful error messages[0m [0m[2m[0.23ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mreport content validation[2m >[0m[1m should include basic report structure[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage:   2. v1.0.1-to-v1.0.2
@checklist/cli:test:coverage:   3. v1.0.2-to-v1.1.0
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test migration path iteration and arithmetic operations[0m [0m[2m[7.73ms[0m[2m][0m
@checklist/cli:test:coverage: [32m✅ No migration needed[39m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mreport content validation[2m >[0m[1m should include setup instructions when not available[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0mreport content validation[2m >[0m[1m should mention required flags[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mChromeDevToolsIntegration[2m > [0msingleton behavior[2m >[0m[1m should maintain consistent state across singleton access[0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/performance/CircularBuffer.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mbasic operations[2m >[0m[1m should push items correctly[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mbasic operations[2m >[0m[1m should overwrite oldest items when full[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mbasic operations[2m >[0m[1m should pop items correctly[0m [0m[2m[0.38ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mbasic operations[2m >[0m[1m should shift items correctly[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mbasic operations[2m >[0m[1m should get items by index[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0marray conversion[2m >[0m[1m should convert to array in correct order[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0marray conversion[2m >[0m[1m should handle empty buffer[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0marray conversion[2m >[0m[1m should handle wrapped buffer[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mfiltering[2m >[0m[1m should filter items correctly[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mfiltering[2m >[0m[1m should return empty array for no matches[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mrecent items[2m >[0m[1m should get recent items correctly[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mrecent items[2m >[0m[1m should handle count larger than buffer size[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mstate methods[2m >[0m[1m should report correct size and capacity[0m [0m[2m[0.18ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mstate methods[2m >[0m[1m should get oldest and newest items[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mstate methods[2m >[0m[1m return null for oldest/newest when empty[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mclearing[2m >[0m[1m should clear all items[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mtimestamps[2m >[0m[1m should track timestamps correctly[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mtimestamps[2m >[0m[1m return null for invalid index timestamp[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mconfiguration updates[2m >[0m[1m should update capacity correctly[0m [0m[2m[0.23ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mconfiguration updates[2m >[0m[1m should reduce capacity and keep newest items[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mconfiguration updates[2m >[0m[1m should handle cleanup timer changes[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mmemory usage[2m >[0m[1m should report memory usage[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mMetricsBuffer specialization[2m >[0m[1m should handle metric objects[0m [0m[2m[0.19ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mMetricsBuffer specialization[2m >[0m[1m should filter metrics by name[0m [0m[2m[0.15ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mMetricsBuffer specialization[2m >[0m[1m should filter metrics by timestamp[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mMetricsBuffer specialization[2m >[0m[1m should calculate statistics correctly[0m [0m[2m[0.39ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mMetricsBuffer specialization[2m >[0m[1m should return zero for non-existent metrics[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mcleanup functionality[2m >[0m[1m should cleanup old items based on age[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0mcleanup functionality[2m >[0m[1m should clear all items if all are expired[0m [0m[2m[0.59ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0medge cases[2m >[0m[1m should throw error for zero capacity[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mCircularBuffer[2m > [0medge cases[2m >[0m[1m should throw error for negative capacity[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/performance/MetricsExporter.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mJSON Export Requirements[2m >[0m[1m should export metrics to JSON format with proper structure[0m [0m[2m[4.65ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mJSON Export Requirements[2m >[0m[1m should include system snapshot in JSON export[0m [0m[2m[1.78ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mJSON Export Requirements[2m >[0m[1m should handle empty metrics array in JSON export[0m [0m[2m[1.92ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mCSV Export Requirements[2m >[0m[1m should export metrics to CSV format with proper headers[0m [0m[2m[2.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mCSV Export Requirements[2m >[0m[1m should properly escape CSV special characters[0m [0m[2m[1.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mCSV Export Requirements[2m >[0m[1m should include metric metadata in CSV export[0m [0m[2m[1.25ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mFile Rotation Requirements[2m >[0m[1m should create export directory if it does not exist[0m [0m[2m[1.60ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mFile Rotation Requirements[2m >[0m[1m should support size-based file rotation logic[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mFile Rotation Requirements[2m >[0m[1m should support daily file rotation logic[0m [0m[2m[1.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mFile Rotation Requirements[2m >[0m[1m should manage maximum number of files[0m [0m[2m[0.32ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mFile Rotation Requirements[2m >[0m[1m should handle file cleanup operations[0m [0m[2m[3.52ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mError Handling Requirements[2m >[0m[1m should handle file permission errors gracefully[0m [0m[2m[0.84ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mError Handling Requirements[2m >[0m[1m should handle disk space errors gracefully[0m [0m[2m[[1m672.93ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mError Handling Requirements[2m >[0m[1m should handle malformed metric data[0m [0m[2m[0.87ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mPerformance Requirements[2m >[0m[1m should export large datasets efficiently[0m [0m[2m[2.32ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mPerformance Requirements[2m >[0m[1m should maintain low overhead for export operations[0m [0m[2m[2.10ms[0m[2m][0m
@checklist/cli:test:coverage:   Current version: 1.1.0
@checklist/cli:test:coverage: [36mStarting migration...[39m
@checklist/cli:test:coverage:   From: [33m1.0.0[39m
@checklist/cli:test:coverage:   To:   [32m1.1.0[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test display methods specific string outputs[0m [0m[2m[5.53ms[0m[2m][0m
@checklist/cli:test:coverage: [33m[39m
@checklist/cli:test:coverage: [33m🔍 Dry run mode - no changes will be made[39m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mMigrations that would be applied:[39m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mConfiguration Requirements[2m >[0m[1m should support configurable export directory[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mConfiguration Requirements[2m >[0m[1m should support configurable file size limits[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mConfiguration Requirements[2m >[0m[1m should support configurable rotation strategies[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMetricsExporter Tests - Export Formats and File Rotation (AC6)[2m > [0mConfiguration Requirements[2m >[0m[1m should support configurable maximum file count[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/views/BaseView.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mConstruction[2m >[0m[1m should create view with correct properties[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mConstruction[2m >[0m[1m should create view with canGoBack false[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mLifecycle Management[2m >[0m[1m should handle mount lifecycle[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mLifecycle Management[2m >[0m[1m should handle unmount lifecycle[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mLifecycle Management[2m >[0m[1m should handle resize events[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mState Management[2m >[0m[1m should save and restore state[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mState Management[2m >[0m[1m should handle state operations[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mState Management[2m >[0m[1m should get state with default values[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mState Management[2m >[0m[1m should clear all state[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mAbstract Method Requirements[2m >[0m[1m should require render implementation[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mAbstract Method Requirements[2m >[0m[1m should require getKeyBindings implementation[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mCommon Key Bindings[2m >[0m[1m should include help and exit bindings[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mCommon Key Bindings[2m >[0m[1m should include back binding when canGoBack is true[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mCommon Key Bindings[2m >[0m[1m should not include back binding when canGoBack is false[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mUtility Methods[2m >[0m[1m should create formatted sections[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mUtility Methods[2m >[0m[1m should center text correctly[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mUtility Methods[2m >[0m[1m should truncate text with ellipsis[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mBaseView[2m > [0mState Isolation[2m >[0m[1m should maintain separate state between instances[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/views/ViewRegistry.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRegistration[2m >[0m[1m should register views successfully[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRegistration[2m >[0m[1m should throw error for duplicate registration[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRegistration[2m >[0m[1m should throw error for mismatched id[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRegistration[2m >[0m[1m should unregister views successfully[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRegistration[2m >[0m[1m should return false when unregistering non-existent view[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRetrieval[2m >[0m[1m should retrieve view by id[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRetrieval[2m >[0m[1m should return undefined for non-existent view[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRetrieval[2m >[0m[1m should check view existence[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRetrieval[2m >[0m[1m should get all view ids[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mRetrieval[2m >[0m[1m should get all views[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mActive State Management[2m >[0m[1m should set views as active/inactive[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mActive State Management[2m >[0m[1m should handle setting active state for non-existent view[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mActive State Management[2m >[0m[1m should get registration info[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mActive State Management[2m >[0m[1m should return undefined for non-existent registration info[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mCleanup[2m >[0m[1m should clear all views[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mStatistics[2m >[0m[1m should provide accurate statistics[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewRegistry[2m > [0mStatistics[2m >[0m[1m should update statistics when views change[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/views/ViewSystem.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mInitialization and Cleanup[2m >[0m[1m should initialize successfully[0m [0m[2m[0.36ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mInitialization and Cleanup[2m >[0m[1m should handle multiple initialization calls[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mInitialization and Cleanup[2m >[0m[1m should destroy and cleanup properly[0m [0m[2m[0.17ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mView Registration[2m >[0m[1m should register views correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mView Registration[2m >[0m[1m should unregister views correctly[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mView Registration[2m >[0m[1m should get view by id[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mNavigation[2m >[0m[1m should navigate to view successfully[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mNavigation[2m >[0m[1m should navigate with parameters[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mNavigation[2m >[0m[1m should handle navigation to non-existent view[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mNavigation[2m >[0m[1m should require initialization before navigation[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mNavigation[2m >[0m[1m should unmount previous view when navigating[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mBack Navigation[2m >[0m[1m should go back successfully[0m [0m[2m[0.20ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mBack Navigation[2m >[0m[1m should not go back when no history[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mBack Navigation[2m >[0m[1m should not go back from single view[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mBack Navigation[2m >[0m[1m should check canGoBack correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mBack Navigation[2m >[0m[1m should clear history[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage:   1. v1.0.0-to-v1.0.1
@checklist/cli:test:coverage:   2. v1.0.1-to-v1.1.0
@checklist/cli:test:coverage: [32m[39m
@checklist/cli:test:coverage: [32m✅ Dry run completed successfully[39m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mState Management[2m >[0m[1m should save and restore view state[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mState Management[2m >[0m[1m should preserve state during navigation[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mLayout Management[2m >[0m[1m should set and get layout[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mLayout Management[2m >[0m[1m should trigger resize on layout change[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mLayout Management[2m >[0m[1m should handle split view navigation[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mLayout Management[2m >[0m[1m should throw error for split view with non-existent views[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mModal and Overlay[2m >[0m[1m should show and hide modal[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mModal and Overlay[2m >[0m[1m should show and hide overlay[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mStatistics and Debugging[2m >[0m[1m should provide navigation history[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mStatistics and Debugging[2m >[0m[1m should provide accurate statistics[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mStatistics and Debugging[2m >[0m[1m should track saved states[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mError Handling[2m >[0m[1m should handle view mounting errors gracefully[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mViewSystem[2m > [0mError Handling[2m >[0m[1m should handle state operations on non-existent views[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test dry run info method with arithmetic and iteration[0m [0m[2m[5.87ms[0m[2m][0m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mApplying migrations...[39m
@checklist/cli:test:coverage: [0m[31m[31m[39m
@checklist/cli:test:coverage: [31m❌ Migration failed:[39m [0m[1m560 |[0m       expect(consoleSpy.log)[0m[3m[1m.toHaveBeenCalledWith[0m(expect[0m[3m[1m.stringContaining[0m([0m[32m'Migration completed successfully'[0m))[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m561 |[0m     })[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m562 |[0m 
@checklist/cli:test:coverage: [0m[1m563 |[0m     it([0m[32m'should handle migration errors'[0m, [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m564 |[0m       mockStateManager.loadState = [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m565 |[0m         [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Migration failed'[0m)[0m[2m;[0m
@checklist/cli:test:coverage:                     [31m[1m^[0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mMigration failed[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m565[0m[2m:[33m15[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m564[0m[2m:[33m48[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m246[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m242[0m[2m:[33m34[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m797[0m[2m:[33m32[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m792[0m[2m:[33m57[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [33mYour data has been backed up and can be restored[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test executeMigration success messages[0m [0m[2m[5.61ms[0m[2m][0m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mApplying migrations...[39m
@checklist/cli:test:coverage: [0m[31m[31m[39m
@checklist/cli:test:coverage: [31m❌ Migration failed:[39m [0m[1m808 |[0m       consoleSpy.log[0m[3m[1m.mockClear[0m()[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m809 |[0m       consoleSpy.error[0m[3m[1m.mockClear[0m()[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m810 |[0m 
@checklist/cli:test:coverage: [0m[1m811 |[0m       [0m[2m// Mock loadState to throw error[0m
@checklist/cli:test:coverage: [0m[1m812 |[0m       mockStateManager.loadState = [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m813 |[0m         [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Migration execution failed'[0m)[0m[2m;[0m
@checklist/cli:test:coverage:                     [31m[1m^[0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mMigration execution failed[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m813[0m[2m:[33m15[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m812[0m[2m:[33m48[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m246[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m242[0m[2m:[33m34[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m817[0m[2m:[33m32[0m[2m)[0m
@checklist/tui:test:coverage: tests/terminal/integration/TerminalSizeEnforcementIntegration.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mUI Blocking Mechanism[2m >[0m[1m should prevent UI rendering when terminal is undersized[0m [0m[2m[0.27ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mUI Blocking Mechanism[2m >[0m[1m should display error screen instead of main UI when undersized[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mUI Blocking Mechanism[2m >[0m[1m should block complex layouts when terminal width insufficient[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mUI Blocking Mechanism[2m >[0m[1m should block scrollable lists when terminal height insufficient[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mUI Blocking Mechanism[2m >[0m[1m should transition from blocked to active when terminal resized[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mUI Blocking Mechanism[2m >[0m[1m should show platform-specific resize instructions when blocked[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mUI Blocking Mechanism[2m >[0m[1m should prevent navigation commands when terminal undersized[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mUI Blocking Mechanism[2m >[0m[1m should provide clear feedback loop for size requirements[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mIntegration with Error Recovery[2m >[0m[1m should maintain size enforcement after error recovery[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mTerminal Size Enforcement Integration[2m > [0mFallback Rendering Integration[2m >[0m[1m should use fallback renderer when size constraints met but capabilities limited[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/errors/helpers/StorageManager.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mconstructor[2m >[0m[1m should create instance with required parameters[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mconstructor[2m >[0m[1m should create instance with optional parameters[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mstorage size tracking[2m >[0m[1m should track storage size[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mstorage size tracking[2m >[0m[1m should recalculate storage size from states[0m [0m[2m[0.34ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mstorage size tracking[2m >[0m[1m should handle empty states map in recalculation[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mstorage limits[2m >[0m[1m should check if over limit[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mstorage limits[2m >[0m[1m should calculate usage percentage[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mcleanup operations[2m >[0m[1m should clean up expired states[0m [0m[2m[0.32ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mcleanup operations[2m >[0m[1m should clean up oldest states when over limit[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mcleanup operations[2m >[0m[1m should handle cleanup when under limit[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mcleanup operations[2m >[0m[1m should handle cleanup with empty states[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mcleanup operations[2m >[0m[1m should filter out already marked states in second pass[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mtimer management[2m >[0m[1m should start cleanup timer[0m [0m[2m[[1m10.61ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mtimer management[2m >[0m[1m should replace existing cleanup timer[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mtimer management[2m >[0m[1m should start persist timer[0m [0m[2m[5.26ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mtimer management[2m >[0m[1m should handle persist timer callback errors[0m [0m[2m[[1m101.32ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mtimer management[2m >[0m[1m should replace existing persist timer[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mpersistence operations[2m >[0m[1m should persist states to disk[0m [0m[2m[[1m32.19ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mpersistence operations[2m >[0m[1m should skip persistence when no path configured[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mpersistence operations[2m >[0m[1m should handle persistence errors[0m [0m[2m[0.15ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mpersistence operations[2m >[0m[1m should load states from disk[0m [0m[2m[[1m11.89ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mpersistence operations[2m >[0m[1m should return null when loading without path[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mpersistence operations[2m >[0m[1m should handle load errors gracefully[0m [0m[2m[[1m11.30ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mmetrics calculation[2m >[0m[1m should calculate metrics for empty states[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mmetrics calculation[2m >[0m[1m should calculate metrics for non-empty states[0m [0m[2m[0.23ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mmetrics calculation[2m >[0m[1m should count expired states in metrics[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mmetrics calculation[2m >[0m[1m should calculate compression ratio with compressed states[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m806[0m[2m:[33m55[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [33mYour data has been backed up and can be restored[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test executeMigration error handling[0m [0m[2m[7.19ms[0m[2m][0m
@checklist/cli:test:coverage: [36mRestoring from backup: invalid-backup.json[39m
@checklist/cli:test:coverage: [0m[31m[31mFailed to restore backup:[39m [0m[1m831 |[0m       [0m[2m// Reset console spy and error spy[0m
@checklist/cli:test:coverage: [0m[1m832 |[0m       consoleSpy.log[0m[3m[1m.mockClear[0m()[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m833 |[0m       consoleSpy.error[0m[3m[1m.mockClear[0m()[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m834 |[0m 
@checklist/cli:test:coverage: [0m[1m835 |[0m       mockStateManager.restoreFromBackup = [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m836 |[0m         [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Restore failed'[0m)[0m[2m;[0m
@checklist/cli:test:coverage:                     [31m[1m^[0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mRestore failed[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m836[0m[2m:[33m15[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m835[0m[2m:[33m56[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrestoreBackup[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m165[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrestoreBackup[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m161[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m840[0m[2m:[33m32[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m830[0m[2m:[33m75[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test restoreBackup error handling with specific messages[0m [0m[2m[7.29ms[0m[2m][0m
@checklist/cli:test:coverage: [36mAvailable backups:[39m
@checklist/cli:test:coverage: [37m[39m
@checklist/cli:test:coverage: [37mBackup files:[39m
@checklist/cli:test:coverage:   1. v1.0.0 - 2024-01-01T12:00:00Z (1.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage:   2. v0.9.0 - 2024-01-02T12:00:00Z (2.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup2.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test listBackups iteration with arithmetic[0m [0m[2m[5.82ms[0m[2m][0m
@checklist/cli:test:coverage: [36mCreating backup...[39m
@checklist/cli:test:coverage: [32m✅ Backup created for version 1.0.0[39m
@checklist/cli:test:coverage:   Path: [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test createBackupOnly with conditional logic[0m [0m[2m[6.02ms[0m[2m][0m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [33mMigration needed:[39m
@checklist/cli:test:coverage:   Current version: [31m1.0.0[39m
@checklist/cli:test:coverage:   Target version:  [32m1.1.0[39m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [33mMigration needed:[39m
@checklist/cli:test:coverage:   Current version: [31m1.0.0[39m
@checklist/cli:test:coverage:   Target version:  [32m1.1.0[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test array iteration edge cases[0m [0m[2m[6.46ms[0m[2m][0m
@checklist/cli:test:coverage: [36mChecking migration status...[39m
@checklist/cli:test:coverage: [33mMigration needed:[39m
@checklist/cli:test:coverage:   Current version: [31m1.0.0[39m
@checklist/cli:test:coverage:   Target version:  [32m1.1.0[39m
@checklist/cli:test:coverage: [36mAvailable backups:[39m
@checklist/cli:test:coverage: [37m[39m
@checklist/cli:test:coverage: [37mBackup files:[39m
@checklist/cli:test:coverage:   1. v1.0.0 - 2024-01-01T12:00:00Z (1.00 KB)
@checklist/cli:test:coverage:      [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage: [36mCreating backup...[39m
@checklist/cli:test:coverage: [32m✅ Backup created for version 1.0.0[39m
@checklist/cli:test:coverage:   Path: [90m/path/to/backup1.json[39m
@checklist/cli:test:coverage: [36mStarting migration...[39m
@checklist/cli:test:coverage:   From: [33m1.0.0[39m
@checklist/cli:test:coverage:   To:   [32m1.1.0[39m
@checklist/cli:test:coverage: [36m[39m
@checklist/cli:test:coverage: [36mApplying migrations...[39m
@checklist/cli:test:coverage: [0m[31m[31m[39m
@checklist/cli:test:coverage: [31m❌ Migration failed:[39m [0m[1m808 |[0m       consoleSpy.log[0m[3m[1m.mockClear[0m()[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m809 |[0m       consoleSpy.error[0m[3m[1m.mockClear[0m()[0m[2m;[0m
@checklist/cli:test:coverage: [0m[1m810 |[0m 
@checklist/cli:test:coverage: [0m[1m811 |[0m       [0m[2m// Mock loadState to throw error[0m
@checklist/cli:test:coverage: [0m[1m812 |[0m       mockStateManager.loadState = [0m[35masync[0m () => {
@checklist/cli:test:coverage: [0m[1m813 |[0m         [0m[35mthrow[0m [0m[35mnew[0m [0m[1mError[0m([0m[32m'Migration execution failed'[0m)[0m[2m;[0m
@checklist/cli:test:coverage:                     [31m[1m^[0m
@checklist/cli:test:coverage: [0m[31merror[0m[2m:[0m [1mMigration execution failed[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m813[0m[2m:[33m15[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2m<anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m812[0m[2m:[33m48[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m246[0m[2m:[33m31[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mexecuteMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m242[0m[2m:[33m34[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3mrunMigration[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m212[0m[2m:[33m16[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[1m[3masync executeMigrationCommand[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36msrc/commands/migrate.ts[0m[2m:[0m[33m107[0m[2m:[33m18[0m[2m)[0m
@checklist/cli:test:coverage: [0m      [2mat [0m[0m[2masync <anonymous>[0m[2m ([0m[0m[36m[2m/Users/eduardomenoncello/Projects/dev-tools/checklist/main/apps/cli/[0m[36mtests/commands/migrate.test.ts[0m[2m:[0m[33m963[0m[2m:[33m32[0m[2m)[0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: [33mYour data has been backed up and can be restored[39m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mMigrateCommand[2m > [0mmutation score improvement tests[2m >[0m[1m should test conditional logic in executeMigrationCommand[0m [0m[2m[7.69ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/reset.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcommand properties[2m >[0m[1m should have correct name and description[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcommand properties[2m >[0m[1m should have correct aliases[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcommand properties[2m >[0m[1m should have all required options[0m [0m[2m[1.91ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcommand properties[2m >[0m[1m should have correct option descriptions[0m [0m[2m[0.15ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should show warning and return when force is false[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should proceed with reset when force is true[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should create backup when backup is true[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should not create backup when backup is false[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should use default values when options are not provided[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mmetrics calculation[2m >[0m[1m should handle metrics for single state[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mconfiguration updates[2m >[0m[1m should update configuration[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should test all combinations of force and backup options[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should handle boolean options correctly[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should test conditional logic in action method[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should test string literals that mutants target[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should test warning message string literals[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should test default option values[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0maction method[2m >[0m[1m should test option flag names and default values[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0merror handling[2m >[0m[1m should validate options before processing[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0merror handling[2m >[0m[1m should handle missing options gracefully[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0merror handling[2m >[0m[1m should handle different option value types[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test string literal mutants[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test conditional expression mutants[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test array declaration mutants[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test object literal mutants[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test equality operator mutants[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mResetCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test boolean literal mutants[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/add.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mcommand properties[2m >[0m[1m should have correct name[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mconfiguration updates[2m >[0m[1m should update configuration without persist path[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mdestruction and cleanup[2m >[0m[1m should destroy and clear timers[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mdestruction and cleanup[2m >[0m[1m should handle destruction when no timers exist[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0mdestruction and cleanup[2m >[0m[1m should clear timers individually[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0medge cases and error handling[2m >[0m[1m should handle states without expiration in cleanup[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0medge cases and error handling[2m >[0m[1m should handle null expiration times[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0medge cases and error handling[2m >[0m[1m should handle zero max storage size[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mcommand properties[2m >[0m[1m should have correct description[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mcommand properties[2m >[0m[1m should have correct aliases[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mcommand properties[2m >[0m[1m should have expected options[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mcommand properties[2m >[0m[1m should have correct option descriptions[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction validation[2m >[0m[1m should throw error when template name is missing[0m [0m[2m[0.17ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction validation[2m >[0m[1m should throw error when template name is empty string[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction validation[2m >[0m[1m should throw error when template name is null[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction validation[2m >[0m[1m should throw error when template name is undefined[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my-template
@checklist/cli:test:coverage: Template added successfully!
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0medge cases and error handling[2m >[0m[1m should handle negative storage sizes[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0medge cases and error handling[2m >[0m[1m should handle complex cleanup scenarios[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0medge cases and error handling[2m >[0m[1m should handle estimateSize function errors gracefully[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mStorageManager[2m > [0medge cases and error handling[2m >[0m[1m should handle callback exceptions in onStateExpired[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/events/helpers/MessageMatcher.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should return true when filter is undefined[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should return true when filter is null[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with type filter[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should not match message with wrong type filter[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with array type filter[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with source filter[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with array source filter[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with target filter[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should not match message without target when filter has target[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with array targets[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with priority filter[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with only min priority[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with only max priority[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should not match message outside priority range[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match message with metadata filter[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should not match message with wrong metadata filter[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match when message has no metadata and filter has no metadata[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesFilter[2m >[0m[1m should match with combined filters[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should return true when message has no target[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should match subscriber ID[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should match subscriber name[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should match wildcard target[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with valid template[2m >[0m[1m should add template without source or force[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my-template
@checklist/cli:test:coverage: Source: https://github.com/example/template.git
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with valid template[2m >[0m[1m should add template with source[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my-template
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with valid template[2m >[0m[1m should add template with force flag true[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my-template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with valid template[2m >[0m[1m should add template with force flag false[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my-template
@checklist/cli:test:coverage: Source: /local/path/to/template
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing template
@checklist/cli:test:coverage: Template added successfully!
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should match pattern with wildcard[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should match pattern with wildcard at end[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should match pattern with multiple wildcards[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should handle array of targets[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mmatchesTarget[2m >[0m[1m should not match when no target matches[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mfilterMessages[2m >[0m[1m should filter by type[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mfilterMessages[2m >[0m[1m should filter by source[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mfilterMessages[2m >[0m[1m should filter by target[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mfilterMessages[2m >[0m[1m should filter by priority range[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mfilterMessages[2m >[0m[1m should filter by time range[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mfilterMessages[2m >[0m[1m should apply limit[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mfilterMessages[2m >[0m[1m should combine multiple filters[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mfilterMessages[2m >[0m[1m should return empty array when no messages match[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should validate correct message[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect missing id[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect invalid id type[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect missing type[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect missing source[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect invalid timestamp[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect invalid priority[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with valid template[2m >[0m[1m should add template with both source and force[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my-template
@checklist/cli:test:coverage: Source: 123
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with valid template[2m >[0m[1m should add template with numeric source[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my-template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with valid template[2m >[0m[1m should add template with empty string source[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: simple
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with different template names[2m >[0m[1m should handle simple template name[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my complex template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with different template names[2m >[0m[1m should handle template name with spaces[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: my-template_v1.0
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with different template names[2m >[0m[1m should handle template name with special characters[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: template123
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction with different template names[2m >[0m[1m should handle template name with numbers[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction option validation[2m >[0m[1m should handle null options gracefully[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction option validation[2m >[0m[1m should handle undefined options gracefully[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0maction option validation[2m >[0m[1m should handle empty options object[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: template
@checklist/cli:test:coverage: Source: valid-source
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should accept valid string target[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should accept valid array target[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect invalid array target with non-strings[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: Adding template: template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test Boolean(source) condition[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: template
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: Adding template: template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test Boolean(force) condition[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: template
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: Adding template: template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test force condition directly[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: test-template
@checklist/cli:test:coverage: Source: test-source
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mconsole output strings that mutations target[2m >[0m[1m should output exact strings that mutations try to change[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: another-template
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect invalid target type[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should accept valid ttl[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should detect invalid ttl[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should accept message without ttl[0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mvalidateMessage[2m >[0m[1m should collect multiple errors[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should create query for types[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should create query for sources[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should create query for targets[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should create query for priority range[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should create query for time range[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should create query for metadata keys[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should handle messages without metadata[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should combine multiple query criteria[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should handle empty query[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should handle messages without targets[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should handle priority range with only min[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should handle priority range with only max[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should handle time range with only start[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mMessageMatcher[2m > [0mcreateMessageQuery[2m >[0m[1m should handle time range with only end[0m
@checklist/tui:test:coverage: [0m
@checklist/tui:test:coverage: tests/performance/metrics/AlertManager.test.ts:
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mConstructor[2m >[0m[1m should initialize with default max alerts[0m [0m[2m[0.19ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mConstructor[2m >[0m[1m should initialize with custom max alerts[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mConstructor[2m >[0m[1m should setup default alert rules[0m [0m[2m[0.20ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mDefault Rule Creation[2m >[0m[1m should create memory usage rule[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mDefault Rule Creation[2m >[0m[1m should create CPU usage rule[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mDefault Rule Creation[2m >[0m[1m should create response time rule[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mDefault Rule Creation[2m >[0m[1m should create error rate rule[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mDefault Rule Creation[2m >[0m[1m should create disk usage rule[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Rule Management[2m >[0m[1m should add custom alert rule[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Rule Management[2m >[0m[1m should replace existing alert rule[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Rule Management[2m >[0m[1m should remove alert rule[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Rule Management[2m >[0m[1m should handle removing non-existent rule[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m > [0mComparison Operators[2m >[0m[1m should trigger alert with > operator[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m > [0mComparison Operators[2m >[0m[1m should trigger alert with < operator[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m > [0mComparison Operators[2m >[0m[1m should trigger alert with >= operator[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m > [0mComparison Operators[2m >[0m[1m should trigger alert with <= operator[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m > [0mComparison Operators[2m >[0m[1m should trigger alert with == operator[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m > [0mComparison Operators[2m >[0m[1m should trigger alert with != operator[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m > [0mComparison Operators[2m >[0m[1m should not trigger with unknown operator[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m >[0m[1m should not trigger when rule has no threshold[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m >[0m[1m should not trigger when rule has no operator[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m >[0m[1m should not trigger for metric without rule[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Triggering Logic[2m >[0m[1m should not trigger when condition is not met[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Creation[2m >[0m[1m should create alert with correct structure[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Creation[2m >[0m[1m should generate unique alert IDs[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Creation[2m >[0m[1m should merge rule tags with point tags[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Creation[2m >[0m[1m should handle missing tags gracefully[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Storage and Retrieval[2m >[0m[1m should store and retrieve alerts[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Storage and Retrieval[2m >[0m[1m should return copy of alerts array[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Storage and Retrieval[2m >[0m[1m should clear all alerts[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mAlert Storage and Retrieval[2m >[0m[1m should trim alerts when max limit is exceeded[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mActive Alerts Filtering[2m >[0m[1m should return recent alerts as active[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mconsole output strings that mutations target[2m >[0m[1m should preserve console.log structure[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mActive Alerts Filtering[2m >[0m[1m should filter out old alerts[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mActive Alerts Filtering[2m >[0m[1m should mix active and inactive alerts correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mActive Alerts Filtering[2m >[0m[1m should return empty array when no active alerts[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mEdge Cases[2m >[0m[1m should handle point without metadata[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mEdge Cases[2m >[0m[1m should handle point with null metadata[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mEdge Cases[2m >[0m[1m should handle point with undefined metric in metadata[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mEdge Cases[2m >[0m[1m should handle very large values[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mEdge Cases[2m >[0m[1m should handle negative values[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[32m✓[0m [0mAlertManager[2m > [0mEdge Cases[2m >[0m[1m should handle zero values[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[2m------------------------------------------------------|---------|---------|-------------------[0m
@checklist/tui:test:coverage: File                                                  [2m|[0m % Funcs [2m|[0m % Lines [2m|[0m Uncovered Line #s
@checklist/tui:test:coverage: [2m------------------------------------------------------|---------|---------|-------------------[0m
@checklist/tui:test:coverage: [0m[1m[31mAll files                                            [0m[2m | [0m[1m[31m  58.84[0m[2m | [0m[1m[31m  62.12[0m[2m |[0m
@checklist/tui:test:coverage: [0m[1m[32m src/errors/helpers/StorageManager.ts                [0m[2m | [0m[1m[32m  97.22[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[32m src/events/helpers/MessageMatcher.ts                [0m[2m | [0m[1m[32m  97.73[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0merror message accuracy[2m >[0m[1m should output exact error message[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0merror message accuracy[2m >[0m[1m should preserve error message formatting[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Adding template: valid-template
@checklist/cli:test:coverage: Template added successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mintegration with base command[2m >[0m[1m should validate options before processing[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mAddCommand[2m > [0mintegration with base command[2m >[0m[1m should handle validation errors[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/base.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should pass validation when all required options are present[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should throw error when required option is missing[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should throw error when required option is null[0m [0m[2m[0.20ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should throw error when required option is undefined[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should throw error when validator fails[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should pass validation for valid option[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should handle short flag notation for required options[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should handle multiple required options[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mvalidateOptions[2m >[0m[1m should pass when all required options are present with short flags[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should return option value when present[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should return short flag value when long flag not present[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should return default value when option not present[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should prefer long flag over short flag[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should handle type assertion correctly[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should return undefined for missing option without default[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should handle boolean options[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should handle nullish values in validation (mutations for null/undefined checks)[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should handle empty string as valid option value[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should handle zero as valid option value[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgetOption[2m >[0m[1m should handle false as valid option value[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should generate basic help text[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should include aliases in help text[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should include options in help text[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle command without aliases[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle command without options[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should format options correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle options with default values that are not strings[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should generate help with proper line breaks[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle empty aliases array correctly[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle single alias correctly[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle options with undefined default values[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle options with empty string default values[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle options with zero default values[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mgenerateHelp[2m >[0m[1m should handle options with false default values[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mabstract implementation[2m >[0m[1m should require implementation of abstract properties[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mabstract implementation[2m >[0m[1m should require implementation of action method[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mintegration with real command[2m >[0m[1m should work with a complete command implementation[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mBaseCommand[2m > [0mintegration with real command[2m >[0m[1m should fail validation during action execution[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/init.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mcommand properties[2m >[0m[1m should have correct command properties[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mcommand properties[2m >[0m[1m should have correct options configuration[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0maction method[2m >[0m[1m should execute with default options[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0maction method[2m >[0m[1m should execute with force flag disabled[0m [0m[2m[0.19ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0maction method[2m >[0m[1m should execute with force flag enabled[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0maction method[2m >[0m[1m should execute with custom template[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0maction method[2m >[0m[1m should execute with default template when not specified[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/tui:test:coverage: [0m[1m[31m src/layout/LayoutManager.ts                         [0m[2m | [0m[1m[31m   6.67[0m[2m | [0m[1m[31m   9.89[0m[2m | [0m[31m18[0m[2m,[0m[31m22[0m[2m,[0m[31m26[0m[2m,[0m[31m30-34[0m[2m,[0m[31m38-63[0m[2m,[0m[31m67-78[0m[2m,[0m[31m82-92[0m[2m,[0m[31m96-120[0m[2m,[0m[31m124-133[0m[2m,[0m[31m137-154[0m[2m,[0m[31m158-181[0m[2m,[0m[31m185-196[0m[2m,[0m[31m204-221
@checklist/tui:test:coverage: [0m[1m[31m src/navigation/NavigationStack.ts                   [0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[31m  61.02[0m[2m | [0m[31m54-57[0m[2m,[0m[31m92-104[0m[2m,[0m[31m111-116
@checklist/tui:test:coverage: [0m[1m[32m src/navigation/ViewRegistry.ts                      [0m[2m | [0m[1m[32m  93.75[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[31m src/performance/ChromeDevToolsHelpers.ts            [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   7.35[0m[2m | [0m[31m13-30[0m[2m,[0m[31m34-40[0m[2m,[0m[31m44-59[0m[2m,[0m[31m63-72[0m[2m,[0m[31m77-87
@checklist/tui:test:coverage: [0m[1m[31m src/performance/ChromeDevToolsIntegration.ts        [0m[2m | [0m[1m[31m  57.89[0m[2m | [0m[1m[31m  28.84[0m[2m | [0m[31m61-104[0m[2m,[0m[31m118-121[0m[2m,[0m[31m123-146[0m[2m,[0m[31m156-167[0m[2m,[0m[31m203-248[0m[2m,[0m[31m290-312
@checklist/tui:test:coverage: [0m[1m[31m src/performance/CircularBuffer.ts                   [0m[2m | [0m[1m[31m  89.66[0m[2m | [0m[1m[32m  98.60[0m[2m | [0m[31m193[0m[2m,[0m[31m305
@checklist/tui:test:coverage: [0m[1m[31m src/performance/MetricsBuffer.ts                    [0m[2m | [0m[1m[32m  91.67[0m[2m | [0m[1m[31m  80.00[0m[2m | [0m[31m43-50
@checklist/tui:test:coverage: [0m[1m[32m src/performance/metrics/AlertManager.ts             [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0maction method[2m >[0m[1m should execute with all options[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0maction method[2m >[0m[1m should handle short flag aliases[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0maction method[2m >[0m[1m should handle mixed long and short flags[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0moption validation[2m >[0m[1m should not require any options by default[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0moption validation[2m >[0m[1m should handle boolean conversion correctly[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0moption validation[2m >[0m[1m should handle template option validation[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mhelp generation[2m >[0m[1m should generate help text correctly[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mhelp generation[2m >[0m[1m should format help text with proper spacing[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0minheritance and integration[2m >[0m[1m should inherit from BaseCommand[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0minheritance and integration[2m >[0m[1m should use BaseCommand methods correctly[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0minheritance and integration[2m >[0m[1m should handle options with defaults correctly[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0merror handling[2m >[0m[1m should handle malformed options gracefully[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0merror handling[2m >[0m[1m should handle empty options object[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0merror handling[2m >[0m[1m should handle options with positional arguments[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should show placeholder messages indicating incomplete implementation[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should have placeholder implementation behavior[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle force option with explicit false default[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle force option with various falsy values[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/CapabilityDetector.ts                  [0m[2m | [0m[1m[31m  34.29[0m[2m | [0m[1m[31m  52.42[0m[2m | [0m[31m56-60[0m[2m,[0m[31m96-98[0m[2m,[0m[31m148-177[0m[2m,[0m[31m186-188[0m[2m,[0m[31m196-202[0m[2m,[0m[31m206-207[0m[2m,[0m[31m211[0m[2m,[0m[31m219-229[0m[2m,[0m[31m233[0m[2m,[0m[31m237[0m[2m,[0m[31m241[0m[2m,[0m[31m245-265[0m[2m,[0m[31m269[0m[2m,[0m[31m273[0m[2m,[0m[31m277-278[0m[2m,[0m[31m282-283[0m[2m,[0m[31m287-291[0m[2m,[0m[31m295-299[0m[2m,[0m[31m303-304[0m[2m,[0m[31m308-309[0m[2m,[0m[31m313
@checklist/tui:test:coverage: [0m[1m[32m src/terminal/CapabilityTester.ts                    [0m[2m | [0m[1m[32m  98.15[0m[2m | [0m[1m[32m  94.78[0m[2m | [0m[31m311-323
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/ColorSupport.ts                        [0m[2m | [0m[1m[31m  62.50[0m[2m | [0m[1m[31m  61.36[0m[2m | [0m[31m157-168[0m[2m,[0m[31m209-220[0m[2m,[0m[31m227-229[0m[2m,[0m[31m237-255[0m[2m,[0m[31m263-267[0m[2m,[0m[31m274-281[0m[2m,[0m[31m289-315[0m[2m,[0m[31m323-373[0m[2m,[0m[31m563-571[0m[2m,[0m[31m576-599
@checklist/tui:test:coverage: [0m[1m[32m src/terminal/DefaultFallbacks.ts                    [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[32m src/terminal/FallbackRenderer.ts                    [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[32m src/terminal/FallbackUtils.ts                       [0m[2m | [0m[1m[32m  96.30[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/TerminalInfo.ts                        [0m[2m | [0m[1m[31m  15.38[0m[2m | [0m[1m[31m  35.85[0m[2m | [0m[31m26[0m[2m,[0m[31m30[0m[2m,[0m[31m34[0m[2m,[0m[31m38[0m[2m,[0m[31m42[0m[2m,[0m[31m54[0m[2m,[0m[31m58[0m[2m,[0m[31m62[0m[2m,[0m[31m66-68[0m[2m,[0m[31m72[0m[2m,[0m[31m76-78[0m[2m,[0m[31m82[0m[2m,[0m[31m86[0m[2m,[0m[31m90[0m[2m,[0m[31m94[0m[2m,[0m[31m98-102[0m[2m,[0m[31m106[0m[2m,[0m[31m110-117[0m[2m,[0m[31m121-131[0m[2m,[0m[31m135-142[0m[2m,[0m[31m146-154[0m[2m,[0m[31m158-164
@checklist/tui:test:coverage: [0m[1m[32m src/terminal/TerminalSizeValidator.ts               [0m[2m | [0m[1m[32m  95.83[0m[2m | [0m[1m[32m  97.76[0m[2m | [0m[31m170-174
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/TerminalTestHarness.ts                 [0m[2m | [0m[1m[31m   7.14[0m[2m | [0m[1m[31m  15.17[0m[2m | [0m[31m94-133[0m[2m,[0m[31m140-179[0m[2m,[0m[31m186-190[0m[2m,[0m[31m197-210[0m[2m,[0m[31m217-229[0m[2m,[0m[31m237-247
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/TerminalTestUtils.ts                   [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   3.64[0m[2m | [0m[31m12-20[0m[2m,[0m[31m27-48[0m[2m,[0m[31m70-84[0m[2m,[0m[31m112-143[0m[2m,[0m[31m150-177
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/TestRunner.ts                          [0m[2m | [0m[1m[31m  46.15[0m[2m | [0m[1m[31m  46.58[0m[2m | [0m[31m53-64[0m[2m,[0m[31m69-83[0m[2m,[0m[31m88[0m[2m,[0m[31m92[0m[2m,[0m[31m96-104
@checklist/tui:test:coverage: [0m[1m[32m src/terminal/UnicodeReplacements.ts                 [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/CapabilityValidation.ts        [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   1.84[0m[2m | [0m[31m17-27[0m[2m,[0m[31m34-40[0m[2m,[0m[31m48-63[0m[2m,[0m[31m76-84[0m[2m,[0m[31m91-101[0m[2m,[0m[31m108-124[0m[2m,[0m[31m132-136[0m[2m,[0m[31m143-158[0m[2m,[0m[31m165-173[0m[2m,[0m[31m180-208[0m[2m,[0m[31m215-230[0m[2m,[0m[31m237-257[0m[2m,[0m[31m264-279[0m[2m,[0m[31m286-306[0m[2m,[0m[31m314-322
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/EnvironmentDetector.ts         [0m[2m | [0m[1m[31m  71.43[0m[2m | [0m[1m[32m  96.97[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/EventManager.ts                [0m[2m | [0m[1m[31m  20.00[0m[2m | [0m[1m[31m  37.93[0m[2m | [0m[31m6-12[0m[2m,[0m[31m16-19[0m[2m,[0m[31m26-32
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/RateLimiter.ts                 [0m[2m | [0m[1m[31m  37.50[0m[2m | [0m[1m[31m  61.40[0m[2m | [0m[31m70-71[0m[2m,[0m[31m78-80[0m[2m,[0m[31m87-102
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle force option with various truthy values[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle template option with empty string default[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle template option with null and undefined values[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/TTYInfoProvider.ts             [0m[2m | [0m[1m[31m  50.00[0m[2m | [0m[1m[31m  71.43[0m[2m | [0m[31m25[0m[2m,[0m[31m29-34
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/TerminalCapabilitiesDetector.ts[0m[2m | [0m[1m[31m  12.50[0m[2m | [0m[1m[31m  10.00[0m[2m | [0m[31m6-8[0m[2m,[0m[31m10-18[0m[2m,[0m[31m20[0m[2m,[0m[31m25-37[0m[2m,[0m[31m41-54[0m[2m,[0m[31m58-77[0m[2m,[0m[31m81-93[0m[2m,[0m[31m97-104
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/TerminalDefinitions.ts         [0m[2m | [0m[1m[31m  80.00[0m[2m | [0m[1m[31m  77.16[0m[2m | [0m[31m153-160[0m[2m,[0m[31m167-195
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/TerminalSizeHelpers.ts         [0m[2m | [0m[1m[31m  60.00[0m[2m | [0m[1m[31m  66.23[0m[2m | [0m[31m109[0m[2m,[0m[31m128[0m[2m,[0m[31m136-153[0m[2m,[0m[31m160-184[0m[2m,[0m[31m192-194[0m[2m,[0m[31m201-203
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/TerminalTestHelpers.ts         [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   4.46[0m[2m | [0m[31m31-36[0m[2m,[0m[31m51-75[0m[2m,[0m[31m90-114[0m[2m,[0m[31m128-148[0m[2m,[0m[31m161-175[0m[2m,[0m[31m182-196
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/TerminalVersionDetector.ts     [0m[2m | [0m[1m[31m   8.33[0m[2m | [0m[1m[31m   9.77[0m[2m | [0m[31m6-14[0m[2m,[0m[31m18-33[0m[2m,[0m[31m37-55[0m[2m,[0m[31m59-74[0m[2m,[0m[31m78-95[0m[2m,[0m[31m99-100[0m[2m,[0m[31m104-109[0m[2m,[0m[31m113-117[0m[2m,[0m[31m121-144[0m[2m,[0m[31m148-152
@checklist/tui:test:coverage: [0m[1m[31m src/terminal/helpers/WarningSystem.ts               [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   7.38[0m[2m | [0m[31m6-29[0m[2m,[0m[31m33-53[0m[2m,[0m[31m57-82[0m[2m,[0m[31m86-107[0m[2m,[0m[31m111-134[0m[2m,[0m[31m139-157[0m[2m,[0m[31m161
@checklist/tui:test:coverage: [0m[1m[32m src/terminal/types.ts                               [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[31m src/views/BaseView.ts                               [0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[31m  83.75[0m[2m | [0m[31m45-56
@checklist/tui:test:coverage: [0m[1m[31m src/views/ViewSystem.ts                             [0m[2m | [0m[1m[31m  78.72[0m[2m | [0m[1m[31m  66.51[0m[2m | [0m[31m161[0m[2m,[0m[31m165[0m[2m,[0m[31m169[0m[2m,[0m[31m173-175[0m[2m,[0m[31m179-193[0m[2m,[0m[31m226-275[0m[2m,[0m[31m279
@checklist/tui:test:coverage: [0m[1m[32m src/views/ViewSystemModalHelper.ts                  [0m[2m | [0m[1m[32m  90.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[31m src/views/ViewSystemNavigation.ts                   [0m[2m | [0m[1m[32m  93.75[0m[2m | [0m[1m[31m  77.55[0m[2m | [0m[31m103-124
@checklist/tui:test:coverage: [0m[1m[31m src/views/ViewSystemTabManager.ts                   [0m[2m | [0m[1m[31m  36.36[0m[2m | [0m[1m[31m  12.39[0m[2m | [0m[31m17-74[0m[2m,[0m[31m78-117
@checklist/tui:test:coverage: [0m[1m[32m src/views/types.ts                                  [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/tui:test:coverage: [0m[1m[31m tests/helpers/CIEnvironmentDetector.ts              [0m[2m | [0m[1m[31m  33.33[0m[2m | [0m[1m[31m  68.75[0m[2m | [0m[31m24[0m[2m,[0m[31m31-34
@checklist/tui:test:coverage: [0m[2m------------------------------------------------------|---------|---------|-------------------[0m
@checklist/tui:test:coverage: 
@checklist/tui:test:coverage: [0m[32m 512 pass[0m
@checklist/tui:test:coverage: [0m[2m 0 fail[0m
@checklist/tui:test:coverage:  1145 expect() calls
@checklist/tui:test:coverage: Ran 512 tests across 17 files. [0m[2m[[1m1284.00ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle template option with various string values[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle template option flag name correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle force option flag name correctly[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Initializing checklist project
@checklist/cli:test:coverage: Force flag enabled - will overwrite existing project
@checklist/cli:test:coverage: Project initialized successfully!
@checklist/cli:test:coverage: [0m[32m✓[0m [0mInitCommand[2m > [0mplaceholder implementation behavior[2m >[0m[1m should handle option precedence (long flag over short flag)[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/status.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcommand properties[2m >[0m[1m should have correct name and description[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcommand properties[2m >[0m[1m should have correct aliases[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcommand properties[2m >[0m[1m should have all required options[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcommand properties[2m >[0m[1m should have correct option descriptions[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcommand properties[2m >[0m[1m should have correct default value for format option[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should show default status when no options provided[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should show verbose mode when verbose option is true[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should not show verbose mode when verbose option is false[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should use custom format when format option is provided[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should use default format when format option is not provided[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should test different format values[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should handle both verbose and format options[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should test conditional logic for all combinations[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should test option flag names and default values[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should test string literals that mutants target[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should test template interpolation[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0maction method[2m >[0m[1m should test boolean options correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0merror handling[2m >[0m[1m should validate options before processing[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0merror handling[2m >[0m[1m should handle missing options gracefully[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0merror handling[2m >[0m[1m should handle different option value types[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test string literal mutants[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test conditional expression mutants[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test array declaration mutants[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test array declaration mutants for aliases[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test object literal mutants[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test boolean literal mutants[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test getOption default value mutants[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test all format options to kill conditional mutants[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mStatusCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test verbose conditional mutants[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/run.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcommand properties[2m >[0m[1m should have correct name and description[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcommand properties[2m >[0m[1m should have correct aliases[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcommand properties[2m >[0m[1m should have all required options[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcommand properties[2m >[0m[1m should have correct option descriptions[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should throw error when template name is missing[0m [0m[2m[0.15ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should throw error when template is null[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should throw error when template is empty string[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should run workflow with template name[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should enable interactive mode when interactive option is true[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should not show interactive message when interactive is false[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should use config file when config option is provided[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should not show config message when config is not provided[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should enable dry run mode when dry-run option is true[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should not show dry run message when dry-run is false[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should handle all options enabled[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should test different template names[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should test conditional logic for all options[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should test option flag names[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should test string literals that mutants target[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should test template interpolation[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should handle config file with different path formats[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0maction method[2m >[0m[1m should test Boolean() function usage for config[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0merror handling[2m >[0m[1m should validate options before processing[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0merror handling[2m >[0m[1m should handle missing template gracefully with appropriate error[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0merror handling[2m >[0m[1m should handle malformed options without crashing[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test string literal mutants[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test conditional expression mutants[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test array declaration mutants[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test array declaration mutants for aliases[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test object literal mutants[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test Boolean() function mutants[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test equality operator mutants[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test boolean literal mutants[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mRunCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test getOption default value mutants[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/performance.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcommand properties[2m >[0m[1m should have correct name and description[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcommand properties[2m >[0m[1m should have correct aliases[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcommand properties[2m >[0m[1m should have all required options[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should show profile when profile option is true[0m [0m[2m[0.23ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should show profile in JSON format when format is json[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should show profile with clear option[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should show memory when memory option is true[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should run garbage collection when gc option is true with global.gc available[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should show devtools when devtools option is true[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should generate report when report option is true[0m [0m[2m[0.56ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should show all performance info when no specific option is provided[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should use default output path when not specified[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should use default format when not specified[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should prioritize profile over other options when multiple are true[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should prioritize memory over devtools and report when profile is false[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should prioritize devtools over report when profile and memory are false[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should format memory usage correctly[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should display heap usage percentage[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should display profile statistics[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should display slow operations count[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should show slow operations when they exist[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should display report summary with correct format[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should handle missing global.gc gracefully[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should handle conditional logic correctly in action method[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should test different format options[0m [0m[2m[0.13ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0maction method[2m >[0m[1m should handle boolean options correctly[0m [0m[2m[0.20ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0merror handling[2m >[0m[1m should validate options before processing[0m [0m[2m[0.72ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0merror handling[2m >[0m[1m should handle string vs boolean options correctly[0m [0m[2m[0.10ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test string literals in console outputs[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test arithmetic operations in byte formatting[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test conditional expressions in method calls[0m [0m[2m[0.27ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test specific string literals in option descriptions[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test default values in options[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test boolean option handling in action method[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test heap usage percentage calculation and threshold logic[0m [0m[2m[0.12ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test error handling message strings[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test arithmetic operations in report summary[0m [0m[2m[0.19ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test showAll method with specific console outputs[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test format option edge cases[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test getOption method with different boolean defaults[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test specific console.log string literals[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test slow operations conditional logic[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test arithmetic operations in formatBytes function[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test conditional display based on slow operations length[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test boolean option default values in action method[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test memory usage percentage calculation[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test report generation flow[0m [0m[2m[0.11ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should test conditional expressions in showAll method[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should handle clear and gc boolean options correctly[0m [0m[2m[0.15ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should handle format option edge cases[0m [0m[2m[0.17ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should handle slow operations with various array states[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should handle memory percentage calculation edge cases[0m [0m[2m[0.21ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should handle object literal edge cases in report generation[0m [0m[2m[0.14ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should handle mathematical operation edge cases in memory calculations[0m [0m[2m[0.17ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should handle array method edge cases in slow operations sorting[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mPerformanceCommand[2m > [0mcode coverage for mutants[2m >[0m[1m should handle string literal edge cases in console output[0m [0m[2m[0.16ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/help.test.ts:
@checklist/cli:test:coverage: init - Initialize new project
@checklist/cli:test:coverage: Usage: checklist init [options]
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with specific command help[2m >[0m[1m should show help for specific command when provided[0m [0m[2m[0.19ms[0m[2m][0m
@checklist/cli:test:coverage: init - Initialize new project
@checklist/cli:test:coverage: Usage: checklist init [options]
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with specific command help[2m >[0m[1m should show help for command alias[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: unknown
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with specific command help[2m >[0m[1m should show error message for unknown command[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: ini
@checklist/cli:test:coverage: Did you mean: init, i?
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with specific command help[2m >[0m[1m should show suggestions for unknown command[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: j
@checklist/cli:test:coverage: Did you mean: i, r?
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with specific command help[2m >[0m[1m should show suggestions for unknown command alias[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: no-help
@checklist/cli:test:coverage: Did you mean: no-help?
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with specific command help[2m >[0m[1m should handle command without generateHelp method[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with specific command help[2m >[0m[1m should handle empty command name[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with general help[2m >[0m[1m should show general help when no command specified[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with general help[2m >[0m[1m should exclude help command from command list[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with general help[2m >[0m[1m should show commands with aliases[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0maction with general help[2m >[0m[1m should show commands without aliases correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0mprivate methods functionality[2m >[0m[1m should print header correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0mprivate methods functionality[2m >[0m[1m should print global options correctly[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0mprivate methods functionality[2m >[0m[1m should print examples correctly[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0mprivate methods functionality[2m >[0m[1m should print footer correctly[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0mcommand properties[2m >[0m[1m should have correct command properties[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0mcommand properties[2m >[0m[1m should inherit from BaseCommand[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0mcommand properties[2m >[0m[1m should generate help for itself[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0merror handling[2m >[0m[1m should handle registry with no commands[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: 123!@#
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0merror handling[2m >[0m[1m should handle malformed command names gracefully[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0merror handling[2m >[0m[1m should handle null/undefined in options array[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: ini
@checklist/cli:test:coverage: Did you mean: init, i?
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should provide multiple suggestions when available[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: xyz
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle suggestions when no close matches exist[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: ini
@checklist/cli:test:coverage: Did you mean: init, init, i?
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle suggestions with single suggestion correctly[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage:   empty-alias  Command with empty aliases
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle empty aliases array in commands list[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage:   single       Single alias command (solo)
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle commands with single alias correctly[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle help command exclusion correctly[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage:   null-alias   Null alias command
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle commands with null/undefined aliases gracefully[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: mul
@checklist/cli:test:coverage: Did you mean: run, multi, m?
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle suggestions with multiple aliases correctly[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Checklist CLI - Manage your checklists and workflows
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Usage: checklist [command] [options]
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Commands:
@checklist/cli:test:coverage:   init         Initialize new project (i)
@checklist/cli:test:coverage:   run          Run workflow (r)
@checklist/cli:test:coverage:   list         List available items
@checklist/cli:test:coverage:   help-test    Help test command (not help command) (ht)
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Global Options:
@checklist/cli:test:coverage:   --help, -h       Show contextual help
@checklist/cli:test:coverage:   --version, -v    Display version info
@checklist/cli:test:coverage:   --config, -c     Specify config file
@checklist/cli:test:coverage:   --verbose        Enable verbose output
@checklist/cli:test:coverage:   --no-color       Disable colored output
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: Examples:
@checklist/cli:test:coverage:   checklist init                    Initialize new project
@checklist/cli:test:coverage:   checklist run development         Run development workflow
@checklist/cli:test:coverage:   checklist add deployment          Add deployment template
@checklist/cli:test:coverage:   checklist status --verbose       Show detailed status
@checklist/cli:test:coverage:   checklist reset --force          Force reset state
@checklist/cli:test:coverage:   checklist list --filter dev      List templates matching 'dev'
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: For help on a specific command:
@checklist/cli:test:coverage:   checklist help <command>
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle command name filtering with edge cases[0m [0m[2m[0.34ms[0m[2m][0m
@checklist/cli:test:coverage: Unknown command: format
@checklist/cli:test:coverage: Did you mean: form?
@checklist/cli:test:coverage: [0m[32m✓[0m [0mHelpCommand[2m > [0msuggestion functionality[2m >[0m[1m should handle suggestion formatting with different alias types[0m [0m[2m[0.08ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/list-simple.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mcommand properties[2m >[0m[1m should have correct name[0m [0m[2m[0.09ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mcommand properties[2m >[0m[1m should have correct description[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mcommand properties[2m >[0m[1m should have correct aliases[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mcommand properties[2m >[0m[1m should have expected options[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mcommand properties[2m >[0m[1m should have correct option descriptions[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mcommand properties[2m >[0m[1m should have default value for format option[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with default options[2m >[0m[1m should list templates with default format[0m [0m[2m[0.22ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with default options[2m >[0m[1m should display all mock templates[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with default options[2m >[0m[1m should capture exact console calls[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with format option[2m >[0m[1m should use text format by default[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with format option[2m >[0m[1m should use explicit text format[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with format option[2m >[0m[1m should use json format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with format option[2m >[0m[1m should use yaml format[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with format option[2m >[0m[1m should handle custom format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with format option[2m >[0m[1m should handle numeric format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with format option[2m >[0m[1m should handle empty string format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with filter option[2m >[0m[1m should display filter when provided[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with filter option[2m >[0m[1m should filter templates by pattern[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with filter option[2m >[0m[1m should filter templates with deployment pattern[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with filter option[2m >[0m[1m should filter templates with default pattern[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with filter option[2m >[0m[1m should handle case-sensitive filtering[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with filter option[2m >[0m[1m should handle empty string filter[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with filter option[2m >[0m[1m should handle non-matching filter[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with filter option[2m >[0m[1m should handle numeric filter[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with both format and filter[2m >[0m[1m should use both format and filter[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0maction with both format and filter[2m >[0m[1m should handle json format with no matching filter[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mconsole output verification[2m >[0m[1m should capture all output in correct order[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mconsole output verification[2m >[0m[1m should preserve template output format[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mconsole output verification[2m >[0m[1m should handle empty options object[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mintegration with base command[2m >[0m[1m should call validateOptions before processing[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mintegration with base command[2m >[0m[1m should handle validation errors[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mgetOption method behavior[2m >[0m[1m should use default format when not specified[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mgetOption method behavior[2m >[0m[1m should use provided format instead of default[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand (Simple Console Testing)[2m > [0mgetOption method behavior[2m >[0m[1m should use undefined filter when not specified[0m [0m[2m[0.06ms[0m[2m][0m
@checklist/cli:test:coverage: [0m
@checklist/cli:test:coverage: tests/commands/list.test.ts:
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mcommand properties[2m >[0m[1m should have correct name[0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mcommand properties[2m >[0m[1m should have correct description[0m [0m[2m[0.17ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mcommand properties[2m >[0m[1m should have correct aliases[0m [0m[2m[0.01ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mcommand properties[2m >[0m[1m should have expected options[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mcommand properties[2m >[0m[1m should have correct option descriptions[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mcommand properties[2m >[0m[1m should have default value for format option[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with default options[2m >[0m[1m should list templates with default format[0m [0m[2m[0.07ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with default options[2m >[0m[1m should display all mock templates[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with format option[2m >[0m[1m should use text format by default[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with format option[2m >[0m[1m should use explicit text format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: json
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with format option[2m >[0m[1m should use json format[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: yaml
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with format option[2m >[0m[1m should use yaml format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: custom
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with format option[2m >[0m[1m should handle custom format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: 123
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with format option[2m >[0m[1m should handle numeric format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: 
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with format option[2m >[0m[1m should handle empty string format[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: dev
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should display filter when provided[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: dev
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should filter templates by pattern[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: deploy
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should filter templates with deployment pattern[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: default
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should filter templates with default pattern[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: template
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should handle partial matches[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: Dev
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should handle case-sensitive filtering[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should handle empty string filter[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: nonexistent
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should handle non-matching filter[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: 123
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with filter option[2m >[0m[1m should handle numeric filter[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: dev
@checklist/cli:test:coverage: Format: json
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with both format and filter[2m >[0m[1m should use both format and filter[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: nonexistent
@checklist/cli:test:coverage: Format: json
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0maction with both format and filter[2m >[0m[1m should handle json format with no matching filter[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: valid-filter
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test Boolean(filter) condition with truthy value[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test Boolean(filter) condition with falsy value[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test Boolean(filter) condition with undefined[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test Boolean(filter) condition with null[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: development
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test filter condition in loop with matching template[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: nonexistent
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mboolean logic testing for mutations[2m >[0m[1m should test filter condition in loop with non-matching template[0m [0m[2m[0.02ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: test
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mconsole output strings that mutations target[2m >[0m[1m should output exact strings that mutations try to change[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mconsole output strings that mutations target[2m >[0m[1m should preserve template output format[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Filter: test
@checklist/cli:test:coverage: Format: json
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mconsole output strings that mutations target[2m >[0m[1m should maintain console.log call order[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mmock template data testing[2m >[0m[1m should use the exact mock template data[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mmock template data testing[2m >[0m[1m should preserve template order in output[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0moption validation[2m >[0m[1m should handle null options gracefully[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0moption validation[2m >[0m[1m should handle undefined options gracefully[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0moption validation[2m >[0m[1m should handle empty options object[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mintegration with base command[2m >[0m[1m should call validateOptions before processing[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mintegration with base command[2m >[0m[1m should handle validation errors[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mgetOption method behavior[2m >[0m[1m should use default format when not specified[0m [0m[2m[0.05ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: yaml
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mgetOption method behavior[2m >[0m[1m should use provided format instead of default[0m [0m[2m[0.03ms[0m[2m][0m
@checklist/cli:test:coverage: Available Templates:
@checklist/cli:test:coverage: Format: text
@checklist/cli:test:coverage:   default - Basic checklist template
@checklist/cli:test:coverage:   development - Software development workflow
@checklist/cli:test:coverage:   deployment - Application deployment checklist
@checklist/cli:test:coverage: [0m[32m✓[0m [0mListCommand[2m > [0mgetOption method behavior[2m >[0m[1m should use undefined filter when not specified[0m [0m[2m[0.04ms[0m[2m][0m
@checklist/cli:test:coverage: [0m[2m----------------------------------------------------------------------|---------|---------|-------------------[0m
@checklist/cli:test:coverage: File                                                                  [2m|[0m % Funcs [2m|[0m % Lines [2m|[0m Uncovered Line #s
@checklist/cli:test:coverage: [2m----------------------------------------------------------------------|---------|---------|-------------------[0m
@checklist/cli:test:coverage: [0m[1m[31mAll files                                                            [0m[2m | [0m[1m[31m  29.46[0m[2m | [0m[1m[31m  39.30[0m[2m |[0m
@checklist/cli:test:coverage: [0m[1m[31m src/commands/add.ts                                                 [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m src/commands/base.ts                                                [0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[32m src/commands/help.ts                                                [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m src/commands/init.ts                                                [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m src/commands/list.ts                                                [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[32m src/commands/migrate.ts                                             [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m src/commands/performance.ts                                         [0m[2m | [0m[1m[31m  83.33[0m[2m | [0m[1m[32m  99.43[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m src/commands/reset.ts                                               [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m src/commands/run.ts                                                 [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m src/commands/status.ts                                              [0m[2m | [0m[1m[31m  66.67[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[32m src/errors.ts                                                       [0m[2m | [0m[1m[32m  90.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m src/index.ts                                                        [0m[2m | [0m[1m[31m  75.00[0m[2m | [0m[1m[31m  87.23[0m[2m | [0m[31m125-135
@checklist/cli:test:coverage: [0m[1m[32m src/parser.ts                                                       [0m[2m | [0m[1m[32m  92.31[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[32m src/registry.ts                                                     [0m[2m | [0m[1m[32m  91.67[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[32m src/types.ts                                                        [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m tests/utils/SimpleConsoleCapture.ts                                 [0m[2m | [0m[1m[31m  55.56[0m[2m | [0m[1m[31m  84.29[0m[2m | [0m[31m50[0m[2m,[0m[31m55[0m[2m,[0m[31m60[0m[2m,[0m[31m65[0m[2m,[0m[31m128[0m[2m,[0m[31m135[0m[2m,[0m[31m142-145
@checklist/cli:test:coverage: [0m[1m[31m tests/utils/TestConsoleHelper.ts                                    [0m[2m | [0m[1m[31m  55.56[0m[2m | [0m[1m[31m  81.82[0m[2m | [0m[31m32[0m[2m,[0m[31m53[0m[2m,[0m[31m60
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/BackupManager.ts                      [0m[2m | [0m[1m[31m   6.25[0m[2m | [0m[1m[31m   5.26[0m[2m | [0m[31m20-217[0m[2m,[0m[31m221-292
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/ConcurrencyManager.ts                 [0m[2m | [0m[1m[31m   5.56[0m[2m | [0m[1m[31m   9.13[0m[2m | [0m[31m33-88[0m[2m,[0m[31m95-132[0m[2m,[0m[31m136-235[0m[2m,[0m[31m241-265
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/DirectoryManager.ts                   [0m[2m | [0m[1m[31m  21.05[0m[2m | [0m[1m[31m  13.95[0m[2m | [0m[31m11-79[0m[2m,[0m[31m85[0m[2m,[0m[31m97[0m[2m,[0m[31m105-143
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/EncryptionKeyManager.ts               [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  13.04[0m[2m | [0m[31m12-70
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/EncryptionMetadata.ts                 [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  14.10[0m[2m | [0m[31m24-90
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/EncryptionOperations.ts               [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  12.31[0m[2m | [0m[31m22-46[0m[2m,[0m[31m53-78[0m[2m,[0m[31m85-90
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/FieldEncryption.ts                    [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  10.07[0m[2m | [0m[31m50-56[0m[2m,[0m[31m63-111[0m[2m,[0m[31m118-157[0m[2m,[0m[31m161[0m[2m,[0m[31m165-212[0m[2m,[0m[31m216-231[0m[2m,[0m[31m235-319[0m[2m,[0m[31m323[0m[2m,[0m[31m327-329
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/SecretsDetector.ts                    [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  34.70[0m[2m | [0m[31m87-103[0m[2m,[0m[31m107-131[0m[2m,[0m[31m135[0m[2m,[0m[31m139[0m[2m,[0m[31m143-158[0m[2m,[0m[31m167[0m[2m,[0m[31m174-181[0m[2m,[0m[31m188-195[0m[2m,[0m[31m203-226[0m[2m,[0m[31m233-274
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/SecurityAudit.ts                      [0m[2m | [0m[1m[31m   9.09[0m[2m | [0m[1m[31m  15.65[0m[2m | [0m[31m71-271[0m[2m,[0m[31m276-280[0m[2m,[0m[31m287-318[0m[2m,[0m[31m325[0m[2m,[0m[31m332-356
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/SecurityAuditFileManager.ts           [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   2.99[0m[2m | [0m[31m19-79[0m[2m,[0m[31m84-152
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/SecurityEventLogger.ts                [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  17.07[0m[2m | [0m[31m14-33[0m[2m,[0m[31m37-45[0m[2m,[0m[31m49[0m[2m,[0m[31m53[0m[2m,[0m[31m57[0m[2m,[0m[31m61-63[0m[2m,[0m[31m68[0m[2m,[0m[31m72-79[0m[2m,[0m[31m83[0m[2m,[0m[31m87-109
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/SecuritySpecialEvents.ts              [0m[2m | [0m[1m[31m  10.00[0m[2m | [0m[1m[31m   3.89[0m[2m | [0m[31m10-142[0m[2m,[0m[31m146-154[0m[2m,[0m[31m159-173[0m[2m,[0m[31m177-181[0m[2m,[0m[31m185-195
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/SecurityStatistics.ts                 [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  12.50[0m[2m | [0m[31m12-35[0m[2m,[0m[31m39-51[0m[2m,[0m[31m55-58[0m[2m,[0m[31m62-66[0m[2m,[0m[31m70-81[0m[2m,[0m[31m85-91[0m[2m,[0m[31m95-100[0m[2m,[0m[31m104-109
@checklist/cli:test:coverage: [0m[1m[32m ../../packages/core/src/state/StateManager.ts                       [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/TransactionCoordinator.ts             [0m[2m | [0m[1m[31m   5.56[0m[2m | [0m[1m[31m   6.76[0m[2m | [0m[31m29-221
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/TransactionLogger.ts                  [0m[2m | [0m[1m[31m  18.18[0m[2m | [0m[1m[31m   8.72[0m[2m | [0m[31m19-56[0m[2m,[0m[31m60-127[0m[2m,[0m[31m134-136[0m[2m,[0m[31m140-187
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/TransactionManager.ts                 [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  13.07[0m[2m | [0m[31m15-26[0m[2m,[0m[31m30-46[0m[2m,[0m[31m50-56[0m[2m,[0m[31m60-68[0m[2m,[0m[31m72-85[0m[2m,[0m[31m89-92[0m[2m,[0m[31m96-97[0m[2m,[0m[31m101-119[0m[2m,[0m[31m123-136[0m[2m,[0m[31m140-149[0m[2m,[0m[31m153-155[0m[2m,[0m[31m159[0m[2m,[0m[31m163[0m[2m,[0m[31m167-169[0m[2m,[0m[31m173-176[0m[2m,[0m[31m180-184[0m[2m,[0m[31m188-197[0m[2m,[0m[31m201-211[0m[2m,[0m[31m215-224[0m[2m,[0m[31m228-244
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/TransactionRecovery.ts                [0m[2m | [0m[1m[31m   4.17[0m[2m | [0m[1m[31m   6.98[0m[2m | [0m[31m17-44[0m[2m,[0m[31m48-49[0m[2m,[0m[31m53-79[0m[2m,[0m[31m83-120[0m[2m,[0m[31m125-171[0m[2m,[0m[31m175-184[0m[2m,[0m[31m188-204[0m[2m,[0m[31m209-215[0m[2m,[0m[31m219[0m[2m,[0m[31m223-241[0m[2m,[0m[31m245-270[0m[2m,[0m[31m274-291
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/WALFileManager.ts                     [0m[2m | [0m[1m[31m  30.00[0m[2m | [0m[1m[31m  34.09[0m[2m | [0m[31m55-112
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/WALRateLimiter.ts                     [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  32.50[0m[2m | [0m[31m18-37[0m[2m,[0m[31m44[0m[2m,[0m[31m51-54[0m[2m,[0m[31m61-62
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/WriteAheadLog.ts                      [0m[2m | [0m[1m[31m   5.26[0m[2m | [0m[1m[31m   6.32[0m[2m | [0m[31m24-97[0m[2m,[0m[31m102-133[0m[2m,[0m[31m137-170[0m[2m,[0m[31m175-212
@checklist/cli:test:coverage: [0m[1m[32m ../../packages/core/src/state/constants.ts                          [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/errors.ts                             [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  36.17[0m[2m | [0m[31m1-6[0m[2m,[0m[31m12-19[0m[2m,[0m[31m25-29[0m[2m,[0m[31m35-39[0m[2m,[0m[31m45-46[0m[2m,[0m[31m52-56
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/manager/MigrationManager.ts           [0m[2m | [0m[1m[31m   7.69[0m[2m | [0m[1m[31m   6.35[0m[2m | [0m[31m17-43[0m[2m,[0m[31m47-64[0m[2m,[0m[31m69-200
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/manager/StateInitializer.ts           [0m[2m | [0m[1m[31m  14.29[0m[2m | [0m[1m[31m  10.48[0m[2m | [0m[31m17-81[0m[2m,[0m[31m85-113
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/manager/StateLoader.ts                [0m[2m | [0m[1m[31m   9.09[0m[2m | [0m[1m[31m   7.41[0m[2m | [0m[31m17-49[0m[2m,[0m[31m53-59[0m[2m,[0m[31m64-173
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/manager/StateManager.ts               [0m[2m | [0m[1m[31m  29.41[0m[2m | [0m[1m[31m  50.00[0m[2m | [0m[31m81-139[0m[2m,[0m[31m144[0m[2m,[0m[31m148-153
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/manager/StateSaver.ts                 [0m[2m | [0m[1m[31m   8.33[0m[2m | [0m[1m[31m   9.55[0m[2m | [0m[31m39-68[0m[2m,[0m[31m72-183
@checklist/cli:test:coverage: [0m[1m[32m ../../packages/core/src/state/manager/index.ts                      [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/BackupManager.ts           [0m[2m | [0m[1m[31m  14.29[0m[2m | [0m[1m[31m  11.27[0m[2m | [0m[31m29-141[0m[2m,[0m[31m145-211
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationBackupHandler.ts  [0m[2m | [0m[1m[31m  16.67[0m[2m | [0m[1m[31m  14.29[0m[2m | [0m[31m16-44
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationExecutor.ts       [0m[2m | [0m[1m[31m   6.25[0m[2m | [0m[1m[31m   5.54[0m[2m | [0m[31m29-147[0m[2m,[0m[31m151-163[0m[2m,[0m[31m167-220[0m[2m,[0m[31m224-273[0m[2m,[0m[31m277-283[0m[2m,[0m[31m287-316
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationHelpers.ts        [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  15.07[0m[2m | [0m[31m7-12[0m[2m,[0m[31m16-22[0m[2m,[0m[31m26-34[0m[2m,[0m[31m38-50[0m[2m,[0m[31m54-76[0m[2m,[0m[31m80-83
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationRecordKeeper.ts   [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   4.30[0m[2m | [0m[31m7-32[0m[2m,[0m[31m37-62[0m[2m,[0m[31m66-80[0m[2m,[0m[31m84-93[0m[2m,[0m[31m97-101[0m[2m,[0m[31m105-202[0m[2m,[0m[31m207-225[0m[2m,[0m[31m229-233[0m[2m,[0m[31m237-321
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationRegistry.ts       [0m[2m | [0m[1m[31m  11.76[0m[2m | [0m[1m[31m  21.57[0m[2m | [0m[31m38-39[0m[2m,[0m[31m43[0m[2m,[0m[31m47-60[0m[2m,[0m[31m67[0m[2m,[0m[31m74-82[0m[2m,[0m[31m89-99[0m[2m,[0m[31m106-116[0m[2m,[0m[31m123-135[0m[2m,[0m[31m139-143[0m[2m,[0m[31m147-154[0m[2m,[0m[31m158-162[0m[2m,[0m[31m167-175[0m[2m,[0m[31m179-181[0m[2m,[0m[31m185-200[0m[2m,[0m[31m204-215
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationRunner.ts         [0m[2m | [0m[1m[31m   4.76[0m[2m | [0m[1m[31m  15.41[0m[2m | [0m[31m23-30[0m[2m,[0m[31m64-65[0m[2m,[0m[31m68-69[0m[2m,[0m[31m71-85[0m[2m,[0m[31m89-96[0m[2m,[0m[31m99-105[0m[2m,[0m[31m108-147[0m[2m,[0m[31m150-288[0m[2m,[0m[31m291-305
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationRunnerHelpers.ts  [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   9.90[0m[2m | [0m[31m13-20[0m[2m,[0m[31m25-48[0m[2m,[0m[31m56-67[0m[2m,[0m[31m74-86[0m[2m,[0m[31m93-140[0m[2m,[0m[31m148-155[0m[2m,[0m[31m162-182[0m[2m,[0m[31m189-210[0m[2m,[0m[31m217-230[0m[2m,[0m[31m237-250[0m[2m,[0m[31m257-315[0m[2m,[0m[31m329-337[0m[2m,[0m[31m350-356[0m[2m,[0m[31m360-364
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationUtils.ts          [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   8.46[0m[2m | [0m[31m7-23[0m[2m,[0m[31m27-47[0m[2m,[0m[31m51-74[0m[2m,[0m[31m78-88[0m[2m,[0m[31m92-106[0m[2m,[0m[31m110-122[0m[2m,[0m[31m126-143
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/MigrationValidator.ts      [0m[2m | [0m[1m[31m   4.55[0m[2m | [0m[1m[31m   8.57[0m[2m | [0m[31m11-34[0m[2m,[0m[31m39-86[0m[2m,[0m[31m91-117[0m[2m,[0m[31m121-129[0m[2m,[0m[31m133-149[0m[2m,[0m[31m154-159[0m[2m,[0m[31m163-168[0m[2m,[0m[31m172-177[0m[2m,[0m[31m181-222[0m[2m,[0m[31m226-227[0m[2m,[0m[31m231-239[0m[2m,[0m[31m243-257[0m[2m,[0m[31m261[0m[2m,[0m[31m265-271[0m[2m,[0m[31m274-278
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/PathFinder.ts              [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  10.34[0m[2m | [0m[31m6-8[0m[2m,[0m[31m11-31[0m[2m,[0m[31m35-47[0m[2m,[0m[31m51-62[0m[2m,[0m[31m66-74[0m[2m,[0m[31m78-88[0m[2m,[0m[31m92-100
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/SchemaValidator.ts         [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  20.00[0m[2m | [0m[31m10-16[0m[2m,[0m[31m23-30[0m[2m,[0m[31m38-44[0m[2m,[0m[31m52-56[0m[2m,[0m[31m63-68[0m[2m,[0m[31m75[0m[2m,[0m[31m82-84[0m[2m,[0m[31m92[0m[2m,[0m[31m99[0m[2m,[0m[31m106-110
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/StateMigrationHandler.ts   [0m[2m | [0m[1m[31m  33.33[0m[2m | [0m[1m[31m  12.00[0m[2m | [0m[31m8-28
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/VersionDetector.ts         [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  23.91[0m[2m | [0m[31m10-16[0m[2m,[0m[31m23-25[0m[2m,[0m[31m32[0m[2m,[0m[31m39[0m[2m,[0m[31m46-53[0m[2m,[0m[31m61[0m[2m,[0m[31m68[0m[2m,[0m[31m75-87
@checklist/cli:test:coverage: [0m[1m[32m ../../packages/core/src/state/migrations/scripts/index.ts           [0m[2m | [0m[1m[32m 100.00[0m[2m | [0m[1m[32m 100.00[0m[2m | [0m
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/scripts/v0_0_0_to_v0_1_0.ts[0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  17.65[0m[2m | [0m[31m9-31[0m[2m,[0m[31m35-44[0m[2m,[0m[31m48-56
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/scripts/v0_1_0_to_v0_2_0.ts[0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  15.38[0m[2m | [0m[31m8-23[0m[2m,[0m[31m27-41[0m[2m,[0m[31m45-57
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/scripts/v0_2_0_to_v1_0_0.ts[0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   6.25[0m[2m | [0m[31m4-25[0m[2m,[0m[31m29-39[0m[2m,[0m[31m43-60[0m[2m,[0m[31m64-82[0m[2m,[0m[31m86-89[0m[2m,[0m[31m94-100[0m[2m,[0m[31m104-124[0m[2m,[0m[31m128-140[0m[2m,[0m[31m145-149[0m[2m,[0m[31m153-156[0m[2m,[0m[31m160[0m[2m,[0m[31m170-178[0m[2m,[0m[31m182-192[0m[2m,[0m[31m196-200
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/types.ts                   [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m  20.00[0m[2m | [0m[31m94-100[0m[2m,[0m[31m106-107[0m[2m,[0m[31m112-123[0m[2m,[0m[31m127-131[0m[2m,[0m[31m135-140
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/migrations/versionDetection.ts        [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   5.22[0m[2m | [0m[31m5-13[0m[2m,[0m[31m17-35[0m[2m,[0m[31m39-54[0m[2m,[0m[31m58-59[0m[2m,[0m[31m63-65[0m[2m,[0m[31m73-90[0m[2m,[0m[31m94[0m[2m,[0m[31m98-104[0m[2m,[0m[31m108-115[0m[2m,[0m[31m119-135[0m[2m,[0m[31m139-155[0m[2m,[0m[31m159-163[0m[2m,[0m[31m167-175[0m[2m,[0m[31m179-208[0m[2m,[0m[31m212-236[0m[2m,[0m[31m241-250[0m[2m,[0m[31m254-268[0m[2m,[0m[31m272-280[0m[2m,[0m[31m284-299
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/state/validation.ts                         [0m[2m | [0m[1m[31m  12.50[0m[2m | [0m[1m[31m  21.00[0m[2m | [0m[31m26-38[0m[2m,[0m[31m42-88[0m[2m,[0m[31m92[0m[2m,[0m[31m96-99[0m[2m,[0m[31m103-116
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/core/src/utils/logger.ts                             [0m[2m | [0m[1m[31m  65.63[0m[2m | [0m[1m[31m  75.98[0m[2m | [0m[31m46[0m[2m,[0m[31m50[0m[2m,[0m[31m54[0m[2m,[0m[31m58[0m[2m,[0m[31m62[0m[2m,[0m[31m170-175[0m[2m,[0m[31m246-250[0m[2m,[0m[31m254-265[0m[2m,[0m[31m269-280[0m[2m,[0m[31m284-297
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/tui/src/performance/ChromeDevToolsHelpers.ts         [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   7.35[0m[2m | [0m[31m13-30[0m[2m,[0m[31m34-40[0m[2m,[0m[31m44-59[0m[2m,[0m[31m63-72[0m[2m,[0m[31m77-87
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/tui/src/performance/ChromeDevToolsIntegration.ts     [0m[2m | [0m[1m[31m  33.33[0m[2m | [0m[1m[31m  10.59[0m[2m | [0m[31m61-248[0m[2m,[0m[31m290-312
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/tui/src/performance/ProfileDecorator.ts              [0m[2m | [0m[1m[31m   0.00[0m[2m | [0m[1m[31m   3.45[0m[2m | [0m[31m28-44[0m[2m,[0m[31m49-63[0m[2m,[0m[31m67[0m[2m,[0m[31m71-89[0m[2m,[0m[31m95-107[0m[2m,[0m[31m111-124[0m[2m,[0m[31m128-130[0m[2m,[0m[31m134-135
@checklist/cli:test:coverage: [0m[1m[31m ../../packages/tui/src/performance/ProfileHandler.ts                [0m[2m | [0m[1m[31m  15.38[0m[2m | [0m[1m[31m  20.45[0m[2m | [0m[31m7[0m[2m,[0m[31m20-26[0m[2m,[0m[31m30-33[0m[2m,[0m[31m37-46[0m[2m,[0m[31m50-55[0m[2m,[0m[31m59-78[0m[2m,[0m[31m82-92[0m[2m,[0m[31m96[0m[2m,[0m[31m119[0m[2m,[0m[31m121-122[0m[2m,[0m[31m124-130
@checklist/cli:test:coverage: [0m[2m----------------------------------------------------------------------|---------|---------|-------------------[0m
@checklist/cli:test:coverage: 
@checklist/cli:test:coverage: [0m[32m 573 pass[0m
@checklist/cli:test:coverage: [0m[2m 0 fail[0m
@checklist/cli:test:coverage:  1576 expect() calls
@checklist/cli:test:coverage: Ran 573 tests across 15 files. [0m[2m[[1m1.58s[0m[2m][0m

 Tasks:    8 successful, 8 total
Cached:    8 cached, 8 total
  Time:    58ms >>> FULL TURBO

